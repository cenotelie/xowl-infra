/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 1.1.0.0
 */

package org.xowl.store.loaders;

import org.xowl.hime.redist.Symbol;
import org.xowl.hime.redist.lexer.Automaton;
import org.xowl.hime.redist.lexer.PrefetchedLexer;

import java.io.IOException;
import java.io.InputStream;

/**
 * Represents a lexer
 */
class NTriplesLexer extends PrefetchedLexer {
    /**
     * The automaton for this lexer
     */
    private static final Automaton automaton = Automaton.find(NTriplesLexer.class, "/res/org/xowl/store/loaders/NTriplesParser.bin");
    /**
     * The collection of terminals matched by this lexer
     * <p/>
     * The terminals are in an order consistent with the automaton,
     * so that terminal indices in the automaton can be used to retrieve the terminals in this table
     */
    private static final Symbol[] terminals = {
            new Symbol(0x0001, "Îµ"),
            new Symbol(0x0002, "$"),
            new Symbol(0x0009, "PN_LOCAL"),
            new Symbol(0x0010, "DOT"),
            new Symbol(0x0005, "BLANK"),
            new Symbol(0x0008, "PN_CHARS"),
            new Symbol(0x000F, "LIT_NUM"),
            new Symbol(0x000A, "FULLIRI"),
            new Symbol(0x000C, "LIT_STRING"),
            new Symbol(0x000B, "NODEID"),
            new Symbol(0x000E, "LIT_LING"),
            new Symbol(0x000D, "LIT_TYPED")};

    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public NTriplesLexer(String input) {
        super(automaton, terminals, 0xFFFF, input);
    }

    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public NTriplesLexer(InputStream input) throws IOException {
        super(automaton, terminals, 0xFFFF, input);
    }

    /**
     * Contains the constant IDs for the terminals for this lexer
     */
    public static class ID {
        /**
         * The unique identifier for terminal PN_LOCAL
         */
        public static final int PN_LOCAL = 0x0009;
        /**
         * The unique identifier for terminal DOT
         */
        public static final int DOT = 0x0010;
        /**
         * The unique identifier for terminal BLANK
         */
        public static final int BLANK = 0x0005;
        /**
         * The unique identifier for terminal PN_CHARS
         */
        public static final int PN_CHARS = 0x0008;
        /**
         * The unique identifier for terminal LIT_NUM
         */
        public static final int LIT_NUM = 0x000F;
        /**
         * The unique identifier for terminal FULLIRI
         */
        public static final int FULLIRI = 0x000A;
        /**
         * The unique identifier for terminal LIT_STRING
         */
        public static final int LIT_STRING = 0x000C;
        /**
         * The unique identifier for terminal NODEID
         */
        public static final int NODEID = 0x000B;
        /**
         * The unique identifier for terminal LIT_LING
         */
        public static final int LIT_LING = 0x000E;
        /**
         * The unique identifier for terminal LIT_TYPED
         */
        public static final int LIT_TYPED = 0x000D;
    }
}
