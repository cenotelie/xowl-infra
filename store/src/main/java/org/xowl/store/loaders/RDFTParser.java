/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 1.3.2.0
 */

package org.xowl.store.loaders;

import org.xowl.hime.redist.Symbol;
import org.xowl.hime.redist.parsers.LRkAutomaton;
import org.xowl.hime.redist.parsers.LRkParser;

/**
 * Represents a parser
 */
class RDFTParser extends LRkParser {
    /**
     * The automaton for this parser
     */
    private static final LRkAutomaton automaton = LRkAutomaton.find(RDFTParser.class, "RDFTParser.bin");

    /**
     * Contains the constant IDs for the variables and virtuals in this parser
     */
    public static class ID {
        /**
         * The unique identifier for variable document
         */
        public static final int document = 0x001F;
        /**
         * The unique identifier for variable directives
         */
        public static final int directives = 0x0020;
        /**
         * The unique identifier for variable directive
         */
        public static final int directive = 0x0021;
        /**
         * The unique identifier for variable prefixID
         */
        public static final int prefixID = 0x0022;
        /**
         * The unique identifier for variable base
         */
        public static final int base = 0x0023;
        /**
         * The unique identifier for variable sparqlBase
         */
        public static final int sparqlBase = 0x0024;
        /**
         * The unique identifier for variable sparqlPrefix
         */
        public static final int sparqlPrefix = 0x0025;
        /**
         * The unique identifier for variable rdfrules
         */
        public static final int rdfrules = 0x0026;
        /**
         * The unique identifier for variable rule
         */
        public static final int rule = 0x0027;
        /**
         * The unique identifier for variable assertions
         */
        public static final int assertions = 0x0028;
        /**
         * The unique identifier for variable assertion
         */
        public static final int assertion = 0x0029;
        /**
         * The unique identifier for variable triple
         */
        public static final int triple = 0x002A;
        /**
         * The unique identifier for variable subject
         */
        public static final int subject = 0x002B;
        /**
         * The unique identifier for variable predicate
         */
        public static final int predicate = 0x002C;
        /**
         * The unique identifier for variable object
         */
        public static final int object = 0x002D;
        /**
         * The unique identifier for variable iri
         */
        public static final int iri = 0x002E;
        /**
         * The unique identifier for variable prefixedName
         */
        public static final int prefixedName = 0x002F;
        /**
         * The unique identifier for variable blankNode
         */
        public static final int blankNode = 0x0030;
        /**
         * The unique identifier for variable literal
         */
        public static final int literal = 0x0031;
        /**
         * The unique identifier for variable booleanLiteral
         */
        public static final int booleanLiteral = 0x0032;
        /**
         * The unique identifier for variable numericLiteral
         */
        public static final int numericLiteral = 0x0033;
        /**
         * The unique identifier for variable rdfLiteral
         */
        public static final int rdfLiteral = 0x0034;
        /**
         * The unique identifier for variable string
         */
        public static final int string = 0x0035;
        /**
         * The unique identifier for variable variable
         */
        public static final int variable = 0x0036;
        /**
         * The unique identifier for variable _Axiom_
         */
        public static final int _Axiom_ = 0x0048;
    }

    /**
     * The collection of variables matched by this parser
     * <p/>
     * The variables are in an order consistent with the automaton,
     * so that variable indices in the automaton can be used to retrieve the variables in this table
     */
    private static final Symbol[] variables = {
            new Symbol(0x001F, "document"),
            new Symbol(0x0020, "directives"),
            new Symbol(0x0021, "directive"),
            new Symbol(0x0022, "prefixID"),
            new Symbol(0x0023, "base"),
            new Symbol(0x0024, "sparqlBase"),
            new Symbol(0x0025, "sparqlPrefix"),
            new Symbol(0x0026, "rdfrules"),
            new Symbol(0x0027, "rule"),
            new Symbol(0x0028, "assertions"),
            new Symbol(0x0029, "assertion"),
            new Symbol(0x002A, "triple"),
            new Symbol(0x002B, "subject"),
            new Symbol(0x002C, "predicate"),
            new Symbol(0x002D, "object"),
            new Symbol(0x002E, "iri"),
            new Symbol(0x002F, "prefixedName"),
            new Symbol(0x0030, "blankNode"),
            new Symbol(0x0031, "literal"),
            new Symbol(0x0032, "booleanLiteral"),
            new Symbol(0x0033, "numericLiteral"),
            new Symbol(0x0034, "rdfLiteral"),
            new Symbol(0x0035, "string"),
            new Symbol(0x0036, "variable"),
            new Symbol(0x0037, "_gen_V55"),
            new Symbol(0x003B, "_gen_V59"),
            new Symbol(0x003F, "_gen_V63"),
            new Symbol(0x0042, "_gen_V66"),
            new Symbol(0x0044, "_gen_V68"),
            new Symbol(0x0048, "_Axiom_")};
    /**
     * The collection of virtuals matched by this parser
     * <p/>
     * The virtuals are in an order consistent with the automaton,
     * so that virtual indices in the automaton can be used to retrieve the virtuals in this table
     */
    private static final Symbol[] virtuals = {
    };

    /**
     * Initializes a new instance of the parser
     *
     * @param lexer The input lexer
     */
    public RDFTParser(RDFTLexer lexer) {
        super(automaton, variables, virtuals, null, lexer);
    }
}
