######################################################################
# Copyright (c) 2015 Laurent Wouters and others
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General
# Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#
# Contributors:
#     Laurent Wouters - lwouters@xowl.org
######################################################################

@base <http://xowl.org/store/rules/xowl> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xowl: <http://xowl.org/store/rules/xowl#> .

# Rules in this document are based on those given at http://www.w3.org/TR/owl2-profiles/#Reasoning_in_OWL_2_RL_and_RDF_Graphs_using_Rules
# Inconsistency is indicated on an entity using:
#   ?e xowl:status xowl:inconsistent


# Expansion of RDF lists
#   For a RDF node h representing a list, all elements can be found with:
#   ?h xowl:contains ?e

rule xowl:list-expansion-init {
    ?h rdf:first ?e1
} => {
    ?h xowl:contains ?e1
}

rule xowl:list-expansion-aggregate {
    ?h rdf:rest ?z
    ?z xowl:contains ?e
} => {
    ?h xowl:contains ?e
}

rule xowl:list-order-init {
    ?p1 rdf:rest ?p2
} => {
    ?p2 xowl:after ?p1
}

rule xowl:list-order-transitive {
    ?p1 xowl:after ?p2
    ?p2 xowl:after ?p3
} => {
    ?p1 xowl:after ?p3
}



rule xowl:functional-property-different-from {
    ?p rdf:type owl:FunctionalProperty
    ?x1 ?p ?y1
    ?x2 ?p ?y2
    ?y1 owl:differentFrom ?y2
} => {
    ?x1 owl:differentFrom ?x2
    # this is because if x1 and x2 were the same, y1 and y2 would have to be the same
}

rule xowl:inverse-functional-property-different-from {
    ?p rdf:type owl:InverseFunctionalProperty
    ?x1 ?p ?y1
    ?x2 ?p ?y2
    ?x1 owl:differentFrom ?x2
} => {
    ?y1 owl:differentFrom ?y2
    # this is because if y1 and y2 were the same, x1 and x2 would have to be the same
}

rule xowl:some-value-from-thing {
    ?x rdf:type ?r
    ?r owl:onProperty ?p
    ?r owl:someValuesFrom owl:Thing
    not (?x ?p ?y)
} => {
    ?x ?p ?o
    # There should be a value but we do not have one
}

rule xowl:card-to-min-max {
    ?x owl:onProperty ?p
    ?x owl:cardinality ?v
    not ( ?x xowl:marker xowl:min-max-to-card )
} => {
    ?y1 rdf:type owl:Restriction
    ?y1 owl:onProperty ?p
    ?y1 owl:maxCardinality ?v
    ?y2 rdf:type owl:Restriction
    ?y2 owl:onProperty ?p
    ?y2 owl:minCardinality ?v
    ?x owl:equivalentClass ?i
    ?i owl:intersectionOf ?l
    ?l rdf:first ?y1
    ?l rdf:rest ?e
    ?e rdf:first ?y2
    ?e rdf:rest rdf:nil
    ?x xowl:marker xowl:card-to-min-max
}

rule xowl:min-max-to-card {
    ?y1 rdf:type owl:Restriction
    ?y1 owl:onProperty ?p
    ?y1 owl:maxCardinality ?v
    ?y2 rdf:type owl:Restriction
    ?y2 owl:onProperty ?p
    ?y2 owl:minCardinality ?v
    not (
        ?l xowl:contains ?y1
        ?l xowl:contains ?y2
        ?i owl:intersectionOf ?l
        ?x owl:equivalentClass ?i
        ?x owl:onProperty ?p
        ?x owl:cardinality ?v
        ?x xowl:marker xowl:card-to-min-max
    )
} => {
    ?x rdf:type owl:Restriction
    ?x owl:onProperty ?p
    ?x owl:cardinality ?v
    ?x owl:equivalentClass ?i
    ?i owl:intersectionOf ?l
    ?l rdf:first ?y1
    ?l rdf:rest ?e
    ?e rdf:first ?y2
    ?e rdf:rest rdf:nil
    ?x xowl:marker xowl:min-max-to-card
}

rule xowl:subclass-of-intersection-init {
    ?i owl:intersectionOf ?l
    ?l rdf:first ?c1
    ?x rdfs:subClassOf ?c1
} => {
    ?x xowl:intersecting ?l
}

rule xowl:subclass-of-intersection-transitive {
    ?x xowl:intersecting ?l
    ?l rdf:rest ?e
    ?e rdf:first ?c2
    ?x rdfs:subClassOf ?c2
} => {
    ?x xowl:intersecting ?e
}

rule xowl:subclass-of-intersection-final {
    ?x xowl:intersecting ?e
    ?e rdf:rest rdf:nil
    ?e xowl:after ?l
    ?i owl:intersectionOf ?l
} => {
    ?x rdfs:subClassOf ?i
}