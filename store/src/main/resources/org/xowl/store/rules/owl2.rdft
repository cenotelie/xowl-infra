######################################################################
# Copyright (c) 2015 Laurent Wouters and others
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General
# Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#
# Contributors:
#     Laurent Wouters - lwouters@xowl.org
######################################################################

@base <http://xowl.org/store/rules/owl2> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xowl: <http://xowl.org/store/rules/xowl#> .

# Rules in this document are based on those given at http://www.w3.org/TR/owl2-profiles/#Reasoning_in_OWL_2_RL_and_RDF_Graphs_using_Rules
# Inconsistency is indicated on an entity using:
#   ?e xowl:status xowl:inconsistent


# Table 4. The Semantics of Equality

rule owl:eq-sym {
    ?x owl:sameAs ?y
} => {
    ?y owl:sameAs ?x
}

rule owl:eq-trans {
    ?x owl:sameAs ?y
    ?y owl:sameAs ?z
} => {
    ?x owl:sameAs ?z
}

rule owl:eq-rep-s {
    ?s owl:sameAs ?s2
    ?s ?p ?o
} => {
    ?s2 ?p ?o
}

rule owl:eq-rep-p {
    ?p owl:sameAs ?p2
    ?s ?p ?o
} => {
    ?s ?p2 ?o
}

rule owl:eq-rep-o {
    ?o owl:sameAs ?o2
    ?s ?p ?o
} => {
    ?s ?p ?o2
}

rule owl:eq-diff1 {
    ?x owl:sameAs ?y
    ?x owl:differentFrom ?y
} => {
    ?x xowl:status xowl:inconsistent
    ?y xowl:status xowl:inconsistent
}

rule owl:eq-diff2 {
    ?x rdf:type owl:AllDifferent
    ?x owl:members ?list
    ?list xowl:contains ?e1
    ?list xowl:contains ?e2
    ?proxy1 rdf:first ?e1
    ?proxy2 rdf:first ?e2
    ?proxy2 xowl:after ?proxy1
    ?e1 owl:sameAs ?e2
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:eq-diff3 {
    ?x rdf:type owl:AllDifferent
    ?x owl:distinctMembers ?y
    ?y xowl:contains ?e1
    ?y xowl:contains ?e2
    ?proxy1 rdf:first ?e1
    ?proxy2 rdf:first ?e2
    ?proxy2 xowl:after ?proxy1
    ?e1 owl:sameAs ?e2
} => {
    ?x xowl:status xowl:inconsistent
}


# Table 5. The Semantics of Axioms about Properties

rule owl:prp-dom {
    ?p rdfs:domain ?c
    ?x ?p ?y
} => {
    ?x rdf:type ?c
}

rule owl:prp-rng {
    ?p rdfs:range ?c
    ?x ?p ?y
} => {
    ?y rdf:type ?c
}

rule owl:prp-fp {
    ?p rdf:type owl:FunctionalProperty
    ?x ?p ?y1
    ?x ?p ?y2
} => {
    ?y1 owl:sameAs ?y2
}

rule owl:prp-ifp {
    ?p rdf:type owl:InverseFunctionalProperty
    ?x1 ?p ?y
    ?x2 ?p ?y
} => {
    ?x1 owl:sameAs ?x2
}

rule owl:prp-symp {
    ?p rdf:type owl:SymmetricProperty
    ?x ?p ?y
} => {
    ?y ?p ?x
}

rule owl:prp-trp {
    ?p rdf:type owl:TransitiveProperty
    ?x ?p ?y
    ?y ?p ?z
} => {
    ?x ?p ?z
}

rule owl:prp-spo1 {
    ?p1 rdfs:subPropertyOf ?p2
    ?x ?p1 ?y
} => {
    ?x ?p2 ?y
}

# TODO: Implement prp-spo2 for owl:propertyChainAxiom

rule owl:prp-eqp1 {
    ?p1 owl:equivalentProperty ?p2
    ?x ?p1 ?y
} => {
    ?x ?p2 ?y
}

rule owl:prp-eqp2 {
    ?p1 owl:equivalentProperty ?p2
    ?x ?p2 ?y
} => {
    ?x ?p1 ?y
}

rule owl:prp-pdw {
    ?p1 owl:propertyDisjointWith ?p2
    ?x ?p1 ?y
    ?x ?p2 ?y
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:prp-adp {
    ?x rdf:type owl:AllDisjointProperties
    ?x owl:members ?list
    ?list xowl:contains ?p1
    ?list xowl:contains ?p2
    ?proxy1 rdf:first ?p1
    ?proxy2 rdf:first ?p2
    ?proxy2 xowl:after ?proxy1
    ?x ?p1 ?y
    ?x ?p2 ?y
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:prp-inv1 {
    ?p1 owl:inverseOf ?p2
    ?x ?p1 ?y
} => {
    ?y ?p2 ?x
}

rule owl:prp-inv2 {
    ?p1 owl:inverseOf ?p2
    ?y ?p2 ?x
} => {
    ?x ?p1 ?y
}

# TODO: Implement prp-key for owl:hasKey

rule owl:prp-npa1 {
    ?x owl:sourceIndividual  ?i1
    ?x owl:assertionProperty ?p
    ?x owl:targetIndividual  ?i2
    ?i1 ?p ?i2
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:prp-npa2 {
    ?x owl:sourceIndividual  ?i
    ?x owl:assertionProperty ?p
    ?x owl:targetValue       ?lt
    ?i ?p ?lt
} => {
    ?x xowl:status xowl:inconsistent
}


# Table 6. The Semantics of Classes

rule owl:cls-nothing2 {
    ?x rdf:type owl:Nothing
} => {
    ?x xowl:status xowl:inconsistent
}

rule xowl:cls-int1-init {
    ?i owl:intersectionOf ?l
    ?l rdf:first ?c1
    ?x rdf:type ?c1
} => {
    ?x xowl:instantiating ?l
}

rule xowl:cls-int1-init-transitive {
    ?x xowl:instantiating ?l
    ?l rdf:rest ?e
    ?e rdf:first ?c2
    ?x rdf:type ?c2
} => {
    ?x xowl:instantiating ?e
}

rule xowl:cls-int1-init-final {
    ?x xowl:instantiating ?e
    ?e rdf:rest rdf:nil
    ?e xowl:after ?l
    ?i owl:intersectionOf ?l
} => {
    ?x rdf:type ?i
}

rule owl:cls-int2 {
    ?c owl:intersectionOf ?x
    ?x xowl:contains ?cx
    ?y rdf:type ?c
} => {
    ?y rdf:type ?cx
}

rule owl:cls-uni {
    ?c owl:unionOf ?x
    ?x xowl:contains ?cx
    ?y rdf:type ?cx
} => {
    ?y rdf:type ?c
}

rule owl:cls-com {
    ?c1 owl:complementOf ?c2
    ?x rdf:type ?c1
    ?x rdf:type ?c2
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:cls-svf1 {
    ?x owl:someValuesFrom ?y
    ?x owl:onProperty ?p
    ?u ?p ?v
    ?v rdf:type ?y
} => {
    ?u rdf:type ?x
}

rule owl:cls-svf2 {
    ?x owl:someValuesFrom owl:Thing
    ?x owl:onProperty ?p
    ?u ?p ?v
} => {
    ?u rdf:type ?x
}

rule owl:cls-avf {
    ?x owl:allValuesFrom ?y
    ?x owl:onProperty ?p
    ?u rdf:type ?x
    ?u ?p ?v
} => {
    ?v rdf:type ?y
}

rule owl:cls-hv1 {
    ?x owl:hasValue ?y
    ?x owl:onProperty ?p
    ?u rdf:type ?x
} => {
    ?u ?p ?y
}

rule owl:cls-hv2 {
    ?x owl:hasValue ?y
    ?x owl:onProperty ?p
    ?u ?p ?y
} => {
    ?u rdf:type ?x
}

rule owl:cls-maxc1 {
    ?x owl:maxCardinality "0"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?u rdf:type ?x
    ?u ?p ?y
} => {
    ?u xowl:status xowl:inconsistent
}

rule owl:cls-maxc2 {
    ?x owl:maxCardinality "1"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?u rdf:type ?x
    ?u ?p ?y1
    ?u ?p ?y2
} => {
    ?y1 owl:sameAs ?y2
}

rule owl:cls-maxqc1 {
    ?x owl:maxQualifiedCardinality "0"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?x owl:onClass ?c
    ?u rdf:type ?x
    ?u ?p ?y
    ?y rdf:type ?c
} => {
    ?u xowl:status xowl:inconsistent
}

rule owl:cls-maxqc2 {
    ?x owl:maxQualifiedCardinality "0"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?x owl:onClass owl:Thing
    ?u rdf:type ?x
    ?u ?p ?y
} => {
    ?u xowl:status xowl:inconsistent
}

rule owl:cls-maxqc3 {
    ?x owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?x owl:onClass ?c
    ?u rdf:type ?x
    ?u ?p ?y1
    ?y1 rdf:type ?c
    ?u ?p ?y2
    ?y2 rdf:type ?c
} => {
    ?y1 owl:sameAs ?y2
}

rule owl:cls-maxqc4 {
    ?x owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger
    ?x owl:onProperty ?p
    ?x owl:onClass owl:Thing
    ?u rdf:type ?x
    ?u ?p ?y1
    ?u ?p ?y2
} => {
    ?y1 owl:sameAs ?y2
}

rule owl:cls-oo {
    ?c rdf:type owl:Class
    ?c owl:oneOf ?x
    ?x xowl:contains ?y
} => {
    ?y rdf:type ?c
}


# Table 7. The Semantics of Class Axioms

rule owl:cax-sco {
    ?c1 rdfs:subClassOf ?c2
    ?x rdf:type ?c1
} => {
    ?x rdf:type ?c2
}

rule owl:cax-eqc1 {
    ?c1 owl:equivalentClass ?c2
    ?x rdf:type ?c1
} => {
    ?x rdf:type ?c2
}

rule owl:cax-eqc2 {
    ?c1 owl:equivalentClass ?c2
    ?x rdf:type ?c2
} => {
    ?x rdf:type ?c1
}

rule owl:cax-dw {
    ?c1 owl:disjointWith ?c2
    ?x rdf:type ?c1
    ?x rdf:type ?c2
} => {
    ?x xowl:status xowl:inconsistent
}

rule owl:cax-adc {
    ?c1 rdf:type owl:AllDisjointClasses
    ?x owl:members ?list
    ?list xowl:contains ?c1
    ?list xowl:contains ?c2
    ?proxy1 rdf:first ?c1
    ?proxy2 rdf:first ?c2
    ?proxy2 xowl:after ?proxy1
    ?z rdf:type ?c1
    ?z rdf:type ?c2
} => {
    ?z xowl:status xowl:inconsistent
}


# Table 9. The Semantics of Schema Vocabulary

rule owl:scm-cls {
    ?c rdf:type owl:Class
} => {
    ?c rdfs:subClassOf ?c
    ?c rdfs:subClassOf owl:Thing
    ?c owl:equivalentClass ?c
    owl:Nothing rdfs:subClassOf ?c
}

rule owl:scm-sco {
    ?c1 rdfs:subClassOf ?c2
    ?c2 rdfs:subClassOf ?c3
} => {
    ?c1 rdfs:subClassOf ?c3
}

rule owl:scm-eqc1 {
    ?c1 owl:equivalentClass ?c2
} => {
    ?c1 rdfs:subClassOf ?c2
    ?c2 rdfs:subClassOf ?c1
}

rule owl:scm-eqc2 {
    ?c1 rdfs:subClassOf ?c2
    ?c2 rdfs:subClassOf ?c1
} => {
    ?c1 owl:equivalentClass ?c2
}

rule owl:scm-op {
    ?p rdf:type owl:ObjectProperty
} => {
    ?p rdfs:subPropertyOf ?p
    ?p owl:equivalentProperty ?p
}

rule owl:scm-dp {
    ?p rdf:type owl:DatatypeProperty
} => {
    ?p rdfs:subPropertyOf ?p
    ?p owl:equivalentProperty ?p
}

rule owl:scm-spo {
    ?p1 rdfs:subPropertyOf ?p2
    ?p2 rdfs:subPropertyOf ?p3
} => {
    ?p1 rdfs:subPropertyOf ?p3
}

rule owl:scm-eqp1 {
    ?p1 owl:equivalentProperty ?p2
} => {
    ?p1 rdfs:subPropertyOf ?p2
    ?p2 rdfs:subPropertyOf ?p1
}

rule owl:scm-eqp2 {
    ?p1 rdfs:subPropertyOf ?p2
    ?p2 rdfs:subPropertyOf ?p1
} => {
    ?p1 owl:equivalentProperty ?p2
}

rule owl:scm-dom1 {
    ?p rdfs:domain ?c1
    ?c1 rdfs:subClassOf ?c2
} => {
    ?p rdfs:domain ?c2
}

rule owl:scm-dom2 {
    ?p2 rdfs:domain ?c
    ?p1 rdfs:subPropertyOf ?p2
} => {
    ?p1 rdfs:domain ?c
}

rule owl:scm-rng1 {
    ?p rdfs:range ?c1
    ?c1 rdfs:subClassOf ?c2
} => {
    ?p rdfs:range ?c2
}

rule owl:scm-rng2 {
    ?p2 rdfs:range ?c
    ?p1 rdfs:subPropertyOf ?p2
} => {
    ?p1 rdfs:range ?c
}

rule owl:scm-hv {
    ?c1 owl:hasValue ?i
    ?c1 owl:onProperty ?p1
    ?c2 owl:hasValue ?i
    ?c2 owl:onProperty ?p2
    ?p1 rdfs:subPropertyOf ?p2
} => {
    ?c1 rdfs:subClassOf ?c2
}

rule owl:scm-svf1 {
    ?c1 owl:someValuesFrom ?y1
    ?c1 owl:onProperty ?p
    ?c2 owl:someValuesFrom ?y2
    ?c2 owl:onProperty ?p
    ?y1 rdfs:subClassOf ?y2
} => {
    ?c1 rdfs:subClassOf ?c2
}

rule owl:scm-svf2 {
    ?c1 owl:someValuesFrom ?y
    ?c1 owl:onProperty ?p1
    ?c2 owl:someValuesFrom ?y
    ?c2 owl:onProperty ?p2
    ?p1 rdfs:subPropertyOf ?p2
} => {
    ?c1 rdfs:subClassOf ?c2
}

rule owl:scm-avf1 {
    ?c1 owl:allValuesFrom ?y1
    ?c1 owl:onProperty ?p
    ?c2 owl:allValuesFrom ?y2
    ?c2 owl:onProperty ?p
    ?y1 rdfs:subClassOf ?y2
} => {
    ?c1 rdfs:subClassOf ?c2
}

rule owl:scm-avf2 {
    ?c1 owl:allValuesFrom ?y
    ?c1 owl:onProperty ?p1
    ?c2 owl:allValuesFrom ?y
    ?c2 owl:onProperty ?p2
    ?p1 rdfs:subPropertyOf ?p2
} => {
    ?c1 rdfs:subClassOf ?c2
}

rule owl:scm-int {
    ?c owl:intersectionOf ?x
    ?x xowl:contains ?cx
} => {
    ?c rdfs:subClassOf ?cx
}

rule owl:scm-uni {
    ?c owl:unionOf ?x
    ?x xowl:contains ?cx
} => {
    ?cx rdfs:subClassOf ?c
}