/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.runtime;

public class LexicalContext {
    // <editor-fold defaultstate="collapsed" desc="Property upvalues">
    public static interface upvalues {
        boolean check_contains(org.xowl.lang.runtime.Upvalue elem);
        boolean user_check_add(org.xowl.lang.runtime.Upvalue elem);
        boolean user_check_remove(org.xowl.lang.runtime.Upvalue elem);
        boolean user_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem);
        void user_add(org.xowl.lang.runtime.Upvalue elem);
        void user_remove(org.xowl.lang.runtime.Upvalue elem);
        boolean inverse_check_add(org.xowl.lang.runtime.Upvalue elem);
        boolean inverse_check_remove(org.xowl.lang.runtime.Upvalue elem);
        boolean inverse_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem);
        void inverse_add(org.xowl.lang.runtime.Upvalue elem);
        void inverse_remove(org.xowl.lang.runtime.Upvalue elem);
    }
    private static class upvalues_impl implements org.xowl.lang.runtime.LexicalContext.upvalues {
        private org.xowl.lang.runtime.LexicalContext domain;
        private java.util.List<org.xowl.lang.runtime.Upvalue> data;
        public java.util.Collection<org.xowl.lang.runtime.Upvalue> get_raw() { return new java.util.ArrayList<org.xowl.lang.runtime.Upvalue>(data); }
        public java.util.Collection<org.xowl.lang.runtime.Upvalue> get() { return new java.util.ArrayList<org.xowl.lang.runtime.Upvalue>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.Upvalue elem) { return (data.contains(elem)); }
        public boolean simple_check_add(org.xowl.lang.runtime.Upvalue elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.Upvalue elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.Upvalue elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.runtime.Upvalue elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.runtime.Upvalue elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.Upvalue elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.Upvalue elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.Upvalue elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Upvalue elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Upvalue elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.Upvalue elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.Upvalue elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Upvalue elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Upvalue elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Upvalue oldElem, org.xowl.lang.runtime.Upvalue  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.Upvalue elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.Upvalue elem) {
            tree_remove(elem);
        }
        public upvalues_impl(org.xowl.lang.runtime.LexicalContext domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.runtime.Upvalue>();
        }
    }
    private upvalues_impl dataUpvalues;
    public org.xowl.lang.runtime.LexicalContext.upvalues __getImplOfupvalues() { return dataUpvalues; }
    public boolean addUpvalues(org.xowl.lang.runtime.Upvalue elem) {
        if (!dataUpvalues.user_check_add(elem)) return false;
        dataUpvalues.user_add(elem);
        return true;
    }
    public boolean removeUpvalues(org.xowl.lang.runtime.Upvalue elem) {
        if (!dataUpvalues.user_check_remove(elem)) return false;
        dataUpvalues.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.Upvalue> getAllUpvalues() { return dataUpvalues.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property parent">
    public static interface parent {
        boolean check_contains(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_add(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem);
        void user_add(org.xowl.lang.runtime.LexicalContext elem);
        void user_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_add(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem);
        void inverse_add(org.xowl.lang.runtime.LexicalContext elem);
        void inverse_remove(org.xowl.lang.runtime.LexicalContext elem);
    }
    private static class parent_impl implements org.xowl.lang.runtime.LexicalContext.parent {
        private org.xowl.lang.runtime.LexicalContext domain;
        private org.xowl.lang.runtime.LexicalContext data;
        public org.xowl.lang.runtime.LexicalContext get_raw() { return data; }
        public org.xowl.lang.runtime.LexicalContext get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.LexicalContext elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.LexicalContext elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.LexicalContext elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.LexicalContext elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.LexicalContext elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.LexicalContext elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.LexicalContext elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.LexicalContext elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.LexicalContext elem) {
            tree_remove(elem);
        }
        public parent_impl(org.xowl.lang.runtime.LexicalContext domain) {
            this.domain = domain;
        }
    }
    private parent_impl dataParent;
    public org.xowl.lang.runtime.LexicalContext.parent __getImplOfparent() { return dataParent; }
    public boolean setParent(org.xowl.lang.runtime.LexicalContext elem) {
        if (dataParent.get() != null) {
            if (elem == null) {
                if (!dataParent.user_check_remove(dataParent.get())) return false;
                dataParent.user_remove(dataParent.get());
            } else {
                if (!dataParent.user_check_replace(dataParent.get(), elem)) return false;
                dataParent.user_remove(dataParent.get());
                dataParent.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataParent.user_check_add(elem)) return false;
            dataParent.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.LexicalContext getParent() { return dataParent.get(); }
    // </editor-fold>

    public LexicalContext() {
        dataUpvalues = new upvalues_impl(this);
        dataParent = new parent_impl(this);
    }
    
}
