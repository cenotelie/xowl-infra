/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.runtime;

public class DataProperty implements org.xowl.lang.runtime.Property {
    // <editor-fold defaultstate="collapsed" desc="Property subPropertyOf">
    private static class subPropertyOf_impl implements org.xowl.lang.runtime.Property.subPropertyOf {
        private org.xowl.lang.runtime.DataProperty domain;
        private java.util.List<org.xowl.lang.runtime.DataProperty> data;
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get_raw() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        public boolean check_contains(org.xowl.lang.runtime.DataProperty elem) { return (data.contains(elem)); }
        @Override public boolean check_contains(org.xowl.lang.runtime.Property elem) {
            if (!(elem instanceof org.xowl.lang.runtime.DataProperty)) return false;
            return (data.contains((org.xowl.lang.runtime.DataProperty)elem));
        }
        public boolean simple_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.DataProperty elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.runtime.DataProperty elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.DataProperty elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.DataProperty elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfsuperPropertyOf().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfsuperPropertyOf().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!oldElem.__getImplOfsuperPropertyOf().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfsuperPropertyOf().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfsuperPropertyOf().inverse_add(domain);
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfsuperPropertyOf().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Property elem) { return user_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Property elem) { return user_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return user_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void user_add(org.xowl.lang.runtime.Property elem) { user_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void user_remove(org.xowl.lang.runtime.Property elem) { user_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public boolean inverse_check_add(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.runtime.DataProperty elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.runtime.DataProperty elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Property elem) { return inverse_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Property elem) { return inverse_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return inverse_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void inverse_add(org.xowl.lang.runtime.Property elem) { inverse_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void inverse_remove(org.xowl.lang.runtime.Property elem) { inverse_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public subPropertyOf_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>();
        }
    }
    private subPropertyOf_impl dataSubPropertyOf;
    public org.xowl.lang.runtime.Property.subPropertyOf __getImplOfsubPropertyOf() { return dataSubPropertyOf; }
    public boolean addSubPropertyOf(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataSubPropertyOf.user_check_add(value)) return false;
        dataSubPropertyOf.user_add(value);
        return true;
    }
    public boolean removeSubPropertyOf(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataSubPropertyOf.user_check_remove(value)) return false;
        dataSubPropertyOf.user_remove(value);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.Property> getAllSubPropertyOfAs(org.xowl.lang.runtime.Property type) {
        java.util.List<org.xowl.lang.runtime.Property> result = new java.util.ArrayList<org.xowl.lang.runtime.Property>();
        for (org.xowl.lang.runtime.DataProperty value : dataSubPropertyOf.get())
            result.add(value);
        return result;
    }
    public boolean addSubPropertyOf(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataSubPropertyOf.user_check_add(elem)) return false;
        dataSubPropertyOf.user_add(elem);
        return true;
    }
    public boolean removeSubPropertyOf(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataSubPropertyOf.user_check_remove(elem)) return false;
        dataSubPropertyOf.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.DataProperty> getAllSubPropertyOfAs(org.xowl.lang.runtime.DataProperty type) { return dataSubPropertyOf.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property interpretationOf">
    private static class interpretationOf_impl implements org.xowl.lang.runtime.Interpretation.interpretationOf {
        private org.xowl.lang.runtime.DataProperty domain;
        private org.xowl.lang.runtime.Entity data;
        public org.xowl.lang.runtime.Entity get_raw() { return data; }
        public org.xowl.lang.runtime.Entity get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.Entity elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.runtime.Entity elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.Entity elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.Entity oldElem, org.xowl.lang.runtime.Entity  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.Entity elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.Entity elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.Entity elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.Entity elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.Entity oldElem, org.xowl.lang.runtime.Entity  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.Entity elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.Entity elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Entity elem) {
            if (!elem.__getImplOfinterpretedAs().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Entity elem) {
            if (!elem.__getImplOfinterpretedAs().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Entity oldElem, org.xowl.lang.runtime.Entity  newElem) {
            if (!oldElem.__getImplOfinterpretedAs().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfinterpretedAs().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.Entity elem) {
            elem.__getImplOfinterpretedAs().inverse_add(domain);
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.Entity elem) {
            elem.__getImplOfinterpretedAs().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Entity elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Entity elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Entity oldElem, org.xowl.lang.runtime.Entity  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.Entity elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.Entity elem) {
            tree_remove(elem);
        }
        public interpretationOf_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
        }
    }
    private interpretationOf_impl dataInterpretationOf;
    public org.xowl.lang.runtime.Interpretation.interpretationOf __getImplOfinterpretationOf() { return dataInterpretationOf; }
    public boolean setInterpretationOf(org.xowl.lang.runtime.Entity elem) {
        if (dataInterpretationOf.get() != null) {
            if (elem == null) {
                if (!dataInterpretationOf.user_check_remove(dataInterpretationOf.get())) return false;
                dataInterpretationOf.user_remove(dataInterpretationOf.get());
            } else {
                if (!dataInterpretationOf.user_check_replace(dataInterpretationOf.get(), elem)) return false;
                dataInterpretationOf.user_remove(dataInterpretationOf.get());
                dataInterpretationOf.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataInterpretationOf.user_check_add(elem)) return false;
            dataInterpretationOf.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.Entity getInterpretationOf() { return dataInterpretationOf.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property propertyDisjointWith">
    private static class propertyDisjointWith_impl implements org.xowl.lang.runtime.Property.propertyDisjointWith {
        private org.xowl.lang.runtime.DataProperty domain;
        private java.util.List<org.xowl.lang.runtime.DataProperty> data;
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get_raw() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        public boolean check_contains(org.xowl.lang.runtime.DataProperty elem) { return (data.contains(elem)); }
        @Override public boolean check_contains(org.xowl.lang.runtime.Property elem) {
            if (!(elem instanceof org.xowl.lang.runtime.DataProperty)) return false;
            return (data.contains((org.xowl.lang.runtime.DataProperty)elem));
        }
        public boolean simple_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.DataProperty elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.runtime.DataProperty elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.DataProperty elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.DataProperty elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfpropertyDisjointWith().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfpropertyDisjointWith().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!oldElem.__getImplOfpropertyDisjointWith().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfpropertyDisjointWith().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfpropertyDisjointWith().inverse_add(domain);
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfpropertyDisjointWith().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Property elem) { return user_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Property elem) { return user_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return user_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void user_add(org.xowl.lang.runtime.Property elem) { user_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void user_remove(org.xowl.lang.runtime.Property elem) { user_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public boolean inverse_check_add(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.runtime.DataProperty elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.runtime.DataProperty elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Property elem) { return inverse_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Property elem) { return inverse_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return inverse_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void inverse_add(org.xowl.lang.runtime.Property elem) { inverse_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void inverse_remove(org.xowl.lang.runtime.Property elem) { inverse_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public propertyDisjointWith_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>();
        }
    }
    private propertyDisjointWith_impl dataPropertyDisjointWith;
    public org.xowl.lang.runtime.Property.propertyDisjointWith __getImplOfpropertyDisjointWith() { return dataPropertyDisjointWith; }
    public boolean addPropertyDisjointWith(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataPropertyDisjointWith.user_check_add(value)) return false;
        dataPropertyDisjointWith.user_add(value);
        return true;
    }
    public boolean removePropertyDisjointWith(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataPropertyDisjointWith.user_check_remove(value)) return false;
        dataPropertyDisjointWith.user_remove(value);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.Property> getAllPropertyDisjointWithAs(org.xowl.lang.runtime.Property type) {
        java.util.List<org.xowl.lang.runtime.Property> result = new java.util.ArrayList<org.xowl.lang.runtime.Property>();
        for (org.xowl.lang.runtime.DataProperty value : dataPropertyDisjointWith.get())
            result.add(value);
        return result;
    }
    public boolean addPropertyDisjointWith(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataPropertyDisjointWith.user_check_add(elem)) return false;
        dataPropertyDisjointWith.user_add(elem);
        return true;
    }
    public boolean removePropertyDisjointWith(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataPropertyDisjointWith.user_check_remove(elem)) return false;
        dataPropertyDisjointWith.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.DataProperty> getAllPropertyDisjointWithAs(org.xowl.lang.runtime.DataProperty type) { return dataPropertyDisjointWith.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property propertyEquivalentTo">
    private static class propertyEquivalentTo_impl implements org.xowl.lang.runtime.Property.propertyEquivalentTo {
        private org.xowl.lang.runtime.DataProperty domain;
        private java.util.List<org.xowl.lang.runtime.DataProperty> data;
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get_raw() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        public boolean check_contains(org.xowl.lang.runtime.DataProperty elem) { return (data.contains(elem)); }
        @Override public boolean check_contains(org.xowl.lang.runtime.Property elem) {
            if (!(elem instanceof org.xowl.lang.runtime.DataProperty)) return false;
            return (data.contains((org.xowl.lang.runtime.DataProperty)elem));
        }
        public boolean simple_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.DataProperty elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.runtime.DataProperty elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.DataProperty elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.DataProperty elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfpropertyEquivalentTo().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfpropertyEquivalentTo().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!oldElem.__getImplOfpropertyEquivalentTo().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfpropertyEquivalentTo().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfpropertyEquivalentTo().inverse_add(domain);
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfpropertyEquivalentTo().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Property elem) { return user_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Property elem) { return user_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return user_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void user_add(org.xowl.lang.runtime.Property elem) { user_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void user_remove(org.xowl.lang.runtime.Property elem) { user_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public boolean inverse_check_add(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.runtime.DataProperty elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.runtime.DataProperty elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Property elem) { return inverse_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Property elem) { return inverse_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return inverse_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void inverse_add(org.xowl.lang.runtime.Property elem) { inverse_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void inverse_remove(org.xowl.lang.runtime.Property elem) { inverse_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public propertyEquivalentTo_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>();
        }
    }
    private propertyEquivalentTo_impl dataPropertyEquivalentTo;
    public org.xowl.lang.runtime.Property.propertyEquivalentTo __getImplOfpropertyEquivalentTo() { return dataPropertyEquivalentTo; }
    public boolean addPropertyEquivalentTo(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataPropertyEquivalentTo.user_check_add(value)) return false;
        dataPropertyEquivalentTo.user_add(value);
        return true;
    }
    public boolean removePropertyEquivalentTo(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataPropertyEquivalentTo.user_check_remove(value)) return false;
        dataPropertyEquivalentTo.user_remove(value);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.Property> getAllPropertyEquivalentToAs(org.xowl.lang.runtime.Property type) {
        java.util.List<org.xowl.lang.runtime.Property> result = new java.util.ArrayList<org.xowl.lang.runtime.Property>();
        for (org.xowl.lang.runtime.DataProperty value : dataPropertyEquivalentTo.get())
            result.add(value);
        return result;
    }
    public boolean addPropertyEquivalentTo(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataPropertyEquivalentTo.user_check_add(elem)) return false;
        dataPropertyEquivalentTo.user_add(elem);
        return true;
    }
    public boolean removePropertyEquivalentTo(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataPropertyEquivalentTo.user_check_remove(elem)) return false;
        dataPropertyEquivalentTo.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.DataProperty> getAllPropertyEquivalentToAs(org.xowl.lang.runtime.DataProperty type) { return dataPropertyEquivalentTo.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property superPropertyOf">
    private static class superPropertyOf_impl implements org.xowl.lang.runtime.Property.superPropertyOf {
        private org.xowl.lang.runtime.DataProperty domain;
        private java.util.List<org.xowl.lang.runtime.DataProperty> data;
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get_raw() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        public java.util.Collection<org.xowl.lang.runtime.DataProperty> get() { return new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        public boolean check_contains(org.xowl.lang.runtime.DataProperty elem) { return (data.contains(elem)); }
        @Override public boolean check_contains(org.xowl.lang.runtime.Property elem) {
            if (!(elem instanceof org.xowl.lang.runtime.DataProperty)) return false;
            return (data.contains((org.xowl.lang.runtime.DataProperty)elem));
        }
        public boolean simple_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.DataProperty elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.runtime.DataProperty elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.DataProperty elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.DataProperty elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfsubPropertyOf().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            if (!elem.__getImplOfsubPropertyOf().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            if (!oldElem.__getImplOfsubPropertyOf().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfsubPropertyOf().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfsubPropertyOf().inverse_add(domain);
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.runtime.DataProperty elem) {
            elem.__getImplOfsubPropertyOf().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Property elem) { return user_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Property elem) { return user_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return user_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void user_add(org.xowl.lang.runtime.Property elem) { user_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void user_remove(org.xowl.lang.runtime.Property elem) { user_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public boolean inverse_check_add(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.runtime.DataProperty elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.runtime.DataProperty oldElem, org.xowl.lang.runtime.DataProperty  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.runtime.DataProperty elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.runtime.DataProperty elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Property elem) { return inverse_check_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Property elem) { return inverse_check_remove((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Property oldElem, org.xowl.lang.runtime.Property  newElem) { return inverse_check_replace((org.xowl.lang.runtime.DataProperty)oldElem, (org.xowl.lang.runtime.DataProperty)newElem); }
        @Override public void inverse_add(org.xowl.lang.runtime.Property elem) { inverse_add((org.xowl.lang.runtime.DataProperty)elem); }
        @Override public void inverse_remove(org.xowl.lang.runtime.Property elem) { inverse_remove((org.xowl.lang.runtime.DataProperty)elem); }
        public superPropertyOf_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.runtime.DataProperty>();
        }
    }
    private superPropertyOf_impl dataSuperPropertyOf;
    public org.xowl.lang.runtime.Property.superPropertyOf __getImplOfsuperPropertyOf() { return dataSuperPropertyOf; }
    public boolean addSuperPropertyOf(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataSuperPropertyOf.user_check_add(value)) return false;
        dataSuperPropertyOf.user_add(value);
        return true;
    }
    public boolean removeSuperPropertyOf(org.xowl.lang.runtime.Property elem) {
        org.xowl.lang.runtime.DataProperty value = (org.xowl.lang.runtime.DataProperty)elem;
        if (!dataSuperPropertyOf.user_check_remove(value)) return false;
        dataSuperPropertyOf.user_remove(value);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.Property> getAllSuperPropertyOfAs(org.xowl.lang.runtime.Property type) {
        java.util.List<org.xowl.lang.runtime.Property> result = new java.util.ArrayList<org.xowl.lang.runtime.Property>();
        for (org.xowl.lang.runtime.DataProperty value : dataSuperPropertyOf.get())
            result.add(value);
        return result;
    }
    public boolean addSuperPropertyOf(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataSuperPropertyOf.user_check_add(elem)) return false;
        dataSuperPropertyOf.user_add(elem);
        return true;
    }
    public boolean removeSuperPropertyOf(org.xowl.lang.runtime.DataProperty elem) {
        if (!dataSuperPropertyOf.user_check_remove(elem)) return false;
        dataSuperPropertyOf.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.runtime.DataProperty> getAllSuperPropertyOfAs(org.xowl.lang.runtime.DataProperty type) { return dataSuperPropertyOf.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property domain">
    private static class domain_impl implements org.xowl.lang.runtime.Property.domain {
        private org.xowl.lang.runtime.DataProperty domain;
        private org.xowl.lang.runtime.Class data;
        public org.xowl.lang.runtime.Class get_raw() { return data; }
        public org.xowl.lang.runtime.Class get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.Class elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.runtime.Class elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.Class elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.Class oldElem, org.xowl.lang.runtime.Class  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.Class elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.Class elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.Class elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.Class elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.Class oldElem, org.xowl.lang.runtime.Class  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.Class elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.Class elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Class elem) {
            if (!elem.__getImplOfdomainOf().inverse_check_add(domain)) return false;
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Class elem) {
            if (!elem.__getImplOfdomainOf().inverse_check_remove(domain)) return false;
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Class oldElem, org.xowl.lang.runtime.Class  newElem) {
            if (!oldElem.__getImplOfdomainOf().inverse_check_remove(domain)) return false;
            if (!newElem.__getImplOfdomainOf().inverse_check_add(domain)) return false;
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.Class elem) {
            elem.__getImplOfdomainOf().inverse_add(domain);
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.Class elem) {
            elem.__getImplOfdomainOf().inverse_remove(domain);
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Class elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Class elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Class oldElem, org.xowl.lang.runtime.Class  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.Class elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.Class elem) {
            tree_remove(elem);
        }
        public domain_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
        }
    }
    private domain_impl dataDomain;
    public org.xowl.lang.runtime.Property.domain __getImplOfdomain() { return dataDomain; }
    public boolean setDomain(org.xowl.lang.runtime.Class elem) {
        if (dataDomain.get() != null) {
            if (elem == null) {
                if (!dataDomain.user_check_remove(dataDomain.get())) return false;
                dataDomain.user_remove(dataDomain.get());
            } else {
                if (!dataDomain.user_check_replace(dataDomain.get(), elem)) return false;
                dataDomain.user_remove(dataDomain.get());
                dataDomain.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataDomain.user_check_add(elem)) return false;
            dataDomain.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.Class getDomain() { return dataDomain.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property range">
    private static class range_impl implements org.xowl.lang.runtime.Property.range {
        private org.xowl.lang.runtime.DataProperty domain;
        private org.xowl.lang.runtime.Datatype data;
        public org.xowl.lang.runtime.Datatype get_raw() { return data; }
        public org.xowl.lang.runtime.Datatype get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        public boolean check_contains(org.xowl.lang.runtime.Datatype elem) { return (data == elem); }
        @Override public boolean check_contains(org.xowl.lang.runtime.Class_OR_Datatype elem) {
            if (!(elem instanceof org.xowl.lang.runtime.Datatype)) return false;
            return (data == elem);
        }
        public boolean simple_check_add(org.xowl.lang.runtime.Datatype elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.Datatype elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.Datatype oldElem, org.xowl.lang.runtime.Datatype  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.Datatype elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.Datatype elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.Datatype elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.Datatype elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.Datatype oldElem, org.xowl.lang.runtime.Datatype  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.Datatype elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.Datatype elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.runtime.Datatype elem) {
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.runtime.Datatype elem) {
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.runtime.Datatype oldElem, org.xowl.lang.runtime.Datatype  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.runtime.Datatype elem) {
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.runtime.Datatype elem) {
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Class_OR_Datatype elem) { return user_check_add((org.xowl.lang.runtime.Datatype)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Class_OR_Datatype elem) { return user_check_remove((org.xowl.lang.runtime.Datatype)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Class_OR_Datatype oldElem, org.xowl.lang.runtime.Class_OR_Datatype  newElem) { return user_check_replace((org.xowl.lang.runtime.Datatype)oldElem, (org.xowl.lang.runtime.Datatype)newElem); }
        @Override public void user_add(org.xowl.lang.runtime.Class_OR_Datatype elem) { user_add((org.xowl.lang.runtime.Datatype)elem); }
        @Override public void user_remove(org.xowl.lang.runtime.Class_OR_Datatype elem) { user_remove((org.xowl.lang.runtime.Datatype)elem); }
        public boolean inverse_check_add(org.xowl.lang.runtime.Datatype elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.runtime.Datatype elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.runtime.Datatype oldElem, org.xowl.lang.runtime.Datatype  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.runtime.Datatype elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.runtime.Datatype elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Class_OR_Datatype elem) { return inverse_check_add((org.xowl.lang.runtime.Datatype)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Class_OR_Datatype elem) { return inverse_check_remove((org.xowl.lang.runtime.Datatype)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Class_OR_Datatype oldElem, org.xowl.lang.runtime.Class_OR_Datatype  newElem) { return inverse_check_replace((org.xowl.lang.runtime.Datatype)oldElem, (org.xowl.lang.runtime.Datatype)newElem); }
        @Override public void inverse_add(org.xowl.lang.runtime.Class_OR_Datatype elem) { inverse_add((org.xowl.lang.runtime.Datatype)elem); }
        @Override public void inverse_remove(org.xowl.lang.runtime.Class_OR_Datatype elem) { inverse_remove((org.xowl.lang.runtime.Datatype)elem); }
        public range_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
        }
    }
    private range_impl dataRange;
    public org.xowl.lang.runtime.Property.range __getImplOfrange() { return dataRange; }
    public boolean setRange(org.xowl.lang.runtime.Class_OR_Datatype elem) {
        if (dataRange.get() != null) {
            if (elem == null) {
                if (!dataRange.user_check_remove(dataRange.get())) return false;
                dataRange.user_remove(dataRange.get());
            } else {
                if (!dataRange.user_check_replace(dataRange.get(), (org.xowl.lang.runtime.Datatype)elem)) return false;
                dataRange.user_remove(dataRange.get());
                dataRange.user_add((org.xowl.lang.runtime.Datatype)elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataRange.user_check_add((org.xowl.lang.runtime.Datatype)elem)) return false;
            dataRange.user_add((org.xowl.lang.runtime.Datatype)elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.Class_OR_Datatype getRangeAs(org.xowl.lang.runtime.Class_OR_Datatype type) { return dataRange.get(); }
    public boolean setRange(org.xowl.lang.runtime.Datatype elem) {
        if (dataRange.get() != null) {
            if (elem == null) {
                if (!dataRange.user_check_remove(dataRange.get())) return false;
                dataRange.user_remove(dataRange.get());
            } else {
                if (!dataRange.user_check_replace(dataRange.get(), elem)) return false;
                dataRange.user_remove(dataRange.get());
                dataRange.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataRange.user_check_add(elem)) return false;
            dataRange.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.Datatype getRangeAs(org.xowl.lang.runtime.Datatype type) { return dataRange.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property isFunctional">
    private static class isFunctional_impl implements org.xowl.lang.runtime.Property.isFunctional {
        private org.xowl.lang.runtime.DataProperty domain;
        private java.lang.Boolean data;
        public java.lang.Boolean get_raw() { return data; }
        public java.lang.Boolean get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Boolean elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Boolean elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Boolean elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Boolean oldElem, java.lang.Boolean  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Boolean elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Boolean elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Boolean elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Boolean elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Boolean oldElem, java.lang.Boolean  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Boolean elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Boolean elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Boolean elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Boolean elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Boolean oldElem, java.lang.Boolean  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Boolean elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Boolean elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Boolean elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Boolean elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Boolean oldElem, java.lang.Boolean  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Boolean elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Boolean elem) {
            tree_remove(elem);
        }
        public isFunctional_impl(org.xowl.lang.runtime.DataProperty domain) {
            this.domain = domain;
        }
    }
    private isFunctional_impl dataIsFunctional;
    public org.xowl.lang.runtime.Property.isFunctional __getImplOfisFunctional() { return dataIsFunctional; }
    public boolean setIsFunctional(java.lang.Boolean elem) {
        dataIsFunctional.simple_add(elem);
        return true;
    }
    public java.lang.Boolean getIsFunctional() { return dataIsFunctional.get(); }
    // </editor-fold>

    public DataProperty() {
        dataSubPropertyOf = new subPropertyOf_impl(this);
        dataInterpretationOf = new interpretationOf_impl(this);
        dataPropertyDisjointWith = new propertyDisjointWith_impl(this);
        dataPropertyEquivalentTo = new propertyEquivalentTo_impl(this);
        dataSuperPropertyOf = new superPropertyOf_impl(this);
        dataDomain = new domain_impl(this);
        dataRange = new range_impl(this);
        dataIsFunctional = new isFunctional_impl(this);
    }

}
