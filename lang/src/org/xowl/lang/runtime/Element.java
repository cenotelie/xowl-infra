/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.runtime;

public class Element implements org.xowl.lang.runtime.Element_OR_Upvalue {
    // <editor-fold defaultstate="collapsed" desc="Property index">
    public static interface index {
        boolean check_contains(java.lang.Integer elem);
        boolean user_check_add(java.lang.Integer elem);
        boolean user_check_remove(java.lang.Integer elem);
        boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem);
        void user_add(java.lang.Integer elem);
        void user_remove(java.lang.Integer elem);
        boolean inverse_check_add(java.lang.Integer elem);
        boolean inverse_check_remove(java.lang.Integer elem);
        boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem);
        void inverse_add(java.lang.Integer elem);
        void inverse_remove(java.lang.Integer elem);
    }
    private static class index_impl implements org.xowl.lang.runtime.Element.index {
        private org.xowl.lang.runtime.Element domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public index_impl(org.xowl.lang.runtime.Element domain) {
            this.domain = domain;
        }
    }
    private index_impl dataIndex;
    public org.xowl.lang.runtime.Element.index __getImplOfindex() { return dataIndex; }
    public boolean setIndex(java.lang.Integer elem) {
        dataIndex.simple_add(elem);
        return true;
    }
    public java.lang.Integer getIndex() { return dataIndex.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property value">
    private static class value_impl implements org.xowl.lang.runtime.Element_OR_Upvalue.value {
        private org.xowl.lang.runtime.Element domain;
        private org.xowl.lang.runtime.Value data;
        public org.xowl.lang.runtime.Value get_raw() { return data; }
        public org.xowl.lang.runtime.Value get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.Value elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.runtime.Value elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.Value elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.Value oldElem, org.xowl.lang.runtime.Value  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.Value elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.Value elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.Value elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.Value elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.Value oldElem, org.xowl.lang.runtime.Value  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.Value elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.Value elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.Value elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.Value elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.Value oldElem, org.xowl.lang.runtime.Value  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.Value elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.Value elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.Value elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.Value elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.Value oldElem, org.xowl.lang.runtime.Value  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.Value elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.Value elem) {
            tree_remove(elem);
        }
        public value_impl(org.xowl.lang.runtime.Element domain) {
            this.domain = domain;
        }
    }
    private value_impl dataValue;
    public org.xowl.lang.runtime.Element_OR_Upvalue.value __getImplOfvalue() { return dataValue; }
    public boolean setValue(org.xowl.lang.runtime.Value elem) {
        if (dataValue.get() != null) {
            if (elem == null) {
                if (!dataValue.user_check_remove(dataValue.get())) return false;
                dataValue.user_remove(dataValue.get());
            } else {
                if (!dataValue.user_check_replace(dataValue.get(), elem)) return false;
                dataValue.user_remove(dataValue.get());
                dataValue.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataValue.user_check_add(elem)) return false;
            dataValue.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.Value getValue() { return dataValue.get(); }
    // </editor-fold>

    public Element() {
        dataIndex = new index_impl(this);
        dataValue = new value_impl(this);
    }
    
}
