/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.runtime;

public class Closure implements org.xowl.lang.runtime.Value {
    // <editor-fold defaultstate="collapsed" desc="Property context">
    public static interface context {
        boolean check_contains(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_add(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean user_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem);
        void user_add(org.xowl.lang.runtime.LexicalContext elem);
        void user_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_add(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_remove(org.xowl.lang.runtime.LexicalContext elem);
        boolean inverse_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem);
        void inverse_add(org.xowl.lang.runtime.LexicalContext elem);
        void inverse_remove(org.xowl.lang.runtime.LexicalContext elem);
    }
    private static class context_impl implements org.xowl.lang.runtime.Closure.context {
        private org.xowl.lang.runtime.Closure domain;
        private org.xowl.lang.runtime.LexicalContext data;
        public org.xowl.lang.runtime.LexicalContext get_raw() { return data; }
        public org.xowl.lang.runtime.LexicalContext get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.runtime.LexicalContext elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.runtime.LexicalContext elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.runtime.LexicalContext elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.runtime.LexicalContext elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.runtime.LexicalContext elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.runtime.LexicalContext elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.runtime.LexicalContext elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.runtime.LexicalContext elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.runtime.LexicalContext oldElem, org.xowl.lang.runtime.LexicalContext  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.runtime.LexicalContext elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.runtime.LexicalContext elem) {
            tree_remove(elem);
        }
        public context_impl(org.xowl.lang.runtime.Closure domain) {
            this.domain = domain;
        }
    }
    private context_impl dataContext;
    public org.xowl.lang.runtime.Closure.context __getImplOfcontext() { return dataContext; }
    public boolean setContext(org.xowl.lang.runtime.LexicalContext elem) {
        if (dataContext.get() != null) {
            if (elem == null) {
                if (!dataContext.user_check_remove(dataContext.get())) return false;
                dataContext.user_remove(dataContext.get());
            } else {
                if (!dataContext.user_check_replace(dataContext.get(), elem)) return false;
                dataContext.user_remove(dataContext.get());
                dataContext.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataContext.user_check_add(elem)) return false;
            dataContext.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.runtime.LexicalContext getContext() { return dataContext.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property closes">
    public static interface closes {
        boolean check_contains(org.xowl.lang.actions.Lambda elem);
        boolean user_check_add(org.xowl.lang.actions.Lambda elem);
        boolean user_check_remove(org.xowl.lang.actions.Lambda elem);
        boolean user_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem);
        void user_add(org.xowl.lang.actions.Lambda elem);
        void user_remove(org.xowl.lang.actions.Lambda elem);
        boolean inverse_check_add(org.xowl.lang.actions.Lambda elem);
        boolean inverse_check_remove(org.xowl.lang.actions.Lambda elem);
        boolean inverse_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem);
        void inverse_add(org.xowl.lang.actions.Lambda elem);
        void inverse_remove(org.xowl.lang.actions.Lambda elem);
    }
    private static class closes_impl implements org.xowl.lang.runtime.Closure.closes {
        private org.xowl.lang.runtime.Closure domain;
        private org.xowl.lang.actions.Lambda data;
        public org.xowl.lang.actions.Lambda get_raw() { return data; }
        public org.xowl.lang.actions.Lambda get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.Lambda elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.Lambda elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.Lambda elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.Lambda elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.Lambda elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.Lambda elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.Lambda elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.Lambda elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.Lambda elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.Lambda elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.Lambda elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.Lambda elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.Lambda elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.Lambda elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.Lambda elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.Lambda oldElem, org.xowl.lang.actions.Lambda  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.Lambda elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.Lambda elem) {
            tree_remove(elem);
        }
        public closes_impl(org.xowl.lang.runtime.Closure domain) {
            this.domain = domain;
        }
    }
    private closes_impl dataCloses;
    public org.xowl.lang.runtime.Closure.closes __getImplOfcloses() { return dataCloses; }
    public boolean setCloses(org.xowl.lang.actions.Lambda elem) {
        if (dataCloses.get() != null) {
            if (elem == null) {
                if (!dataCloses.user_check_remove(dataCloses.get())) return false;
                dataCloses.user_remove(dataCloses.get());
            } else {
                if (!dataCloses.user_check_replace(dataCloses.get(), elem)) return false;
                dataCloses.user_remove(dataCloses.get());
                dataCloses.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataCloses.user_check_add(elem)) return false;
            dataCloses.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.Lambda getCloses() { return dataCloses.get(); }
    // </editor-fold>

    public Closure() {
        dataContext = new context_impl(this);
        dataCloses = new closes_impl(this);
    }
    
}
