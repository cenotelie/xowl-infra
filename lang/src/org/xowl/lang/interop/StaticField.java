/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.interop;

public class StaticField implements org.xowl.lang.interop.CastableExpression, org.xowl.lang.interop.NewObject_OR_StaticField, org.xowl.lang.interop.ObjectField_OR_StaticField, org.xowl.lang.actions.ArrayExpression, org.xowl.lang.actions.ExecutableExpression, org.xowl.lang.interop.JavaObjectExpression, org.xowl.lang.owl2.EntityExpression, org.xowl.lang.owl2.LiteralExpression, org.xowl.lang.owl2.Expression, org.xowl.lang.owl2.ClassExpression, org.xowl.lang.owl2.DataPropertyExpression, org.xowl.lang.owl2.Datarange, org.xowl.lang.owl2.IndividualExpression, org.xowl.lang.owl2.ObjectPropertyExpression, org.xowl.lang.actions.FunctionExpression {
    // <editor-fold defaultstate="collapsed" desc="Property classe">
    private static class classe_impl implements org.xowl.lang.interop.NewObject_OR_StaticField.classe {
        private org.xowl.lang.interop.StaticField domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        public classe_impl(org.xowl.lang.interop.StaticField domain) {
            this.domain = domain;
        }
    }
    private classe_impl dataClasse;
    public org.xowl.lang.interop.NewObject_OR_StaticField.classe __getImplOfclasse() { return dataClasse; }
    public boolean setClasse(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataClasse.get() != null) {
            if (elem == null) {
                if (!dataClasse.user_check_remove(dataClasse.get())) return false;
                dataClasse.user_remove(dataClasse.get());
            } else {
                if (!dataClasse.user_check_replace(dataClasse.get(), elem)) return false;
                dataClasse.user_remove(dataClasse.get());
                dataClasse.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataClasse.user_check_add(elem)) return false;
            dataClasse.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getClasse() { return dataClasse.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property field">
    private static class field_impl implements org.xowl.lang.interop.ObjectField_OR_StaticField.field {
        private org.xowl.lang.interop.StaticField domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        public field_impl(org.xowl.lang.interop.StaticField domain) {
            this.domain = domain;
        }
    }
    private field_impl dataField;
    public org.xowl.lang.interop.ObjectField_OR_StaticField.field __getImplOffield() { return dataField; }
    public boolean setField(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataField.get() != null) {
            if (elem == null) {
                if (!dataField.user_check_remove(dataField.get())) return false;
                dataField.user_remove(dataField.get());
            } else {
                if (!dataField.user_check_replace(dataField.get(), elem)) return false;
                dataField.user_remove(dataField.get());
                dataField.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataField.user_check_add(elem)) return false;
            dataField.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getField() { return dataField.get(); }
    // </editor-fold>

    public StaticField() {
        dataClasse = new classe_impl(this);
        dataField = new field_impl(this);
    }
    
}
