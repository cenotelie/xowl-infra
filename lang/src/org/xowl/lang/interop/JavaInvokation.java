/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.interop;

public class JavaInvokation implements org.xowl.lang.actions.Statement, org.xowl.lang.interop.CastableExpression, org.xowl.lang.interop.JavaInvokation_OR_NewObject, org.xowl.lang.interop.JavaInvokation_OR_ObjectField, org.xowl.lang.owl2.Axiom_OR_Statement, org.xowl.lang.actions.ArrayExpression, org.xowl.lang.actions.ExecutableExpression, org.xowl.lang.interop.JavaObjectExpression, org.xowl.lang.owl2.EntityExpression, org.xowl.lang.owl2.LiteralExpression, org.xowl.lang.owl2.Expression, org.xowl.lang.owl2.ClassExpression, org.xowl.lang.owl2.DataPropertyExpression, org.xowl.lang.owl2.Datarange, org.xowl.lang.owl2.IndividualExpression, org.xowl.lang.owl2.ObjectPropertyExpression, org.xowl.lang.actions.FunctionExpression {
    // <editor-fold defaultstate="collapsed" desc="Property line">
    private static class line_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.line {
        private org.xowl.lang.interop.JavaInvokation domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public line_impl(org.xowl.lang.interop.JavaInvokation domain) {
            this.domain = domain;
        }
    }
    private line_impl dataLine;
    public org.xowl.lang.owl2.Axiom_OR_Statement.line __getImplOfline() { return dataLine; }
    public boolean setLine(java.lang.Integer elem) {
        dataLine.simple_add(elem);
        return true;
    }
    public java.lang.Integer getLine() { return dataLine.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property method">
    public static interface method {
        boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void user_add(org.xowl.lang.owl2.LiteralExpression elem);
        void user_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void inverse_add(org.xowl.lang.owl2.LiteralExpression elem);
        void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem);
    }
    private static class method_impl implements org.xowl.lang.interop.JavaInvokation.method {
        private org.xowl.lang.interop.JavaInvokation domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        public method_impl(org.xowl.lang.interop.JavaInvokation domain) {
            this.domain = domain;
        }
    }
    private method_impl dataMethod;
    public org.xowl.lang.interop.JavaInvokation.method __getImplOfmethod() { return dataMethod; }
    public boolean setMethod(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataMethod.get() != null) {
            if (elem == null) {
                if (!dataMethod.user_check_remove(dataMethod.get())) return false;
                dataMethod.user_remove(dataMethod.get());
            } else {
                if (!dataMethod.user_check_replace(dataMethod.get(), elem)) return false;
                dataMethod.user_remove(dataMethod.get());
                dataMethod.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataMethod.user_check_add(elem)) return false;
            dataMethod.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getMethod() { return dataMethod.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property on">
    private static class on_impl implements org.xowl.lang.interop.JavaInvokation_OR_ObjectField.on {
        private org.xowl.lang.interop.JavaInvokation domain;
        private org.xowl.lang.interop.JavaObjectExpression data;
        public org.xowl.lang.interop.JavaObjectExpression get_raw() { return data; }
        public org.xowl.lang.interop.JavaObjectExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.interop.JavaObjectExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.interop.JavaObjectExpression oldElem, org.xowl.lang.interop.JavaObjectExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.interop.JavaObjectExpression oldElem, org.xowl.lang.interop.JavaObjectExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.interop.JavaObjectExpression oldElem, org.xowl.lang.interop.JavaObjectExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.interop.JavaObjectExpression oldElem, org.xowl.lang.interop.JavaObjectExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.interop.JavaObjectExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.interop.JavaObjectExpression elem) {
            tree_remove(elem);
        }
        public on_impl(org.xowl.lang.interop.JavaInvokation domain) {
            this.domain = domain;
        }
    }
    private on_impl dataOn;
    public org.xowl.lang.interop.JavaInvokation_OR_ObjectField.on __getImplOfon() { return dataOn; }
    public boolean setOn(org.xowl.lang.interop.JavaObjectExpression elem) {
        if (dataOn.get() != null) {
            if (elem == null) {
                if (!dataOn.user_check_remove(dataOn.get())) return false;
                dataOn.user_remove(dataOn.get());
            } else {
                if (!dataOn.user_check_replace(dataOn.get(), elem)) return false;
                dataOn.user_remove(dataOn.get());
                dataOn.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataOn.user_check_add(elem)) return false;
            dataOn.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.interop.JavaObjectExpression getOn() { return dataOn.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property file">
    private static class file_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.file {
        private org.xowl.lang.interop.JavaInvokation domain;
        private java.lang.String data;
        public java.lang.String get_raw() { return data; }
        public java.lang.String get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.String elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.String elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.String elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.String elem) {
            data = elem;
        }
        public void simple_remove(java.lang.String elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.String elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.String elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.String elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.String elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        public file_impl(org.xowl.lang.interop.JavaInvokation domain) {
            this.domain = domain;
        }
    }
    private file_impl dataFile;
    public org.xowl.lang.owl2.Axiom_OR_Statement.file __getImplOffile() { return dataFile; }
    public boolean setFile(java.lang.String elem) {
        dataFile.simple_add(elem);
        return true;
    }
    public java.lang.String getFile() { return dataFile.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property params">
    private static class params_impl implements org.xowl.lang.interop.JavaInvokation_OR_NewObject.params {
        private org.xowl.lang.interop.JavaInvokation domain;
        private java.util.List<org.xowl.lang.owl2.Expression> data;
        public java.util.Collection<org.xowl.lang.owl2.Expression> get_raw() { return new java.util.ArrayList<org.xowl.lang.owl2.Expression>(data); }
        public java.util.Collection<org.xowl.lang.owl2.Expression> get() { return new java.util.ArrayList<org.xowl.lang.owl2.Expression>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) { return (data.contains(elem)); }
        public boolean simple_check_add(org.xowl.lang.owl2.Expression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.Expression elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.owl2.Expression elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.Expression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.Expression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        public params_impl(org.xowl.lang.interop.JavaInvokation domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.owl2.Expression>();
        }
    }
    private params_impl dataParams;
    public org.xowl.lang.interop.JavaInvokation_OR_NewObject.params __getImplOfparams() { return dataParams; }
    public boolean addParams(org.xowl.lang.owl2.Expression elem) {
        if (!dataParams.user_check_add(elem)) return false;
        dataParams.user_add(elem);
        return true;
    }
    public boolean removeParams(org.xowl.lang.owl2.Expression elem) {
        if (!dataParams.user_check_remove(elem)) return false;
        dataParams.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.owl2.Expression> getAllParams() { return dataParams.get(); }
    // </editor-fold>

    public JavaInvokation() {
        dataLine = new line_impl(this);
        dataMethod = new method_impl(this);
        dataOn = new on_impl(this);
        dataFile = new file_impl(this);
        dataParams = new params_impl(this);
    }
    
}
