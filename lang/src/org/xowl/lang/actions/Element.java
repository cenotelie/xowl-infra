/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class Element {
    // <editor-fold defaultstate="collapsed" desc="Property elemIndex">
    public static interface elemIndex {
        boolean check_contains(java.lang.Integer elem);
        boolean user_check_add(java.lang.Integer elem);
        boolean user_check_remove(java.lang.Integer elem);
        boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem);
        void user_add(java.lang.Integer elem);
        void user_remove(java.lang.Integer elem);
        boolean inverse_check_add(java.lang.Integer elem);
        boolean inverse_check_remove(java.lang.Integer elem);
        boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem);
        void inverse_add(java.lang.Integer elem);
        void inverse_remove(java.lang.Integer elem);
    }
    private static class elemIndex_impl implements org.xowl.lang.actions.Element.elemIndex {
        private org.xowl.lang.actions.Element domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public elemIndex_impl(org.xowl.lang.actions.Element domain) {
            this.domain = domain;
        }
    }
    private elemIndex_impl dataElemIndex;
    public org.xowl.lang.actions.Element.elemIndex __getImplOfelemIndex() { return dataElemIndex; }
    public boolean setElemIndex(java.lang.Integer elem) {
        dataElemIndex.simple_add(elem);
        return true;
    }
    public java.lang.Integer getElemIndex() { return dataElemIndex.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property elemValue">
    public static interface elemValue {
        boolean check_contains(org.xowl.lang.owl2.Expression elem);
        boolean user_check_add(org.xowl.lang.owl2.Expression elem);
        boolean user_check_remove(org.xowl.lang.owl2.Expression elem);
        boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem);
        void user_add(org.xowl.lang.owl2.Expression elem);
        void user_remove(org.xowl.lang.owl2.Expression elem);
        boolean inverse_check_add(org.xowl.lang.owl2.Expression elem);
        boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem);
        boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem);
        void inverse_add(org.xowl.lang.owl2.Expression elem);
        void inverse_remove(org.xowl.lang.owl2.Expression elem);
    }
    private static class elemValue_impl implements org.xowl.lang.actions.Element.elemValue {
        private org.xowl.lang.actions.Element domain;
        private org.xowl.lang.owl2.Expression data;
        public org.xowl.lang.owl2.Expression get_raw() { return data; }
        public org.xowl.lang.owl2.Expression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.Expression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.Expression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.Expression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.Expression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.Expression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        public elemValue_impl(org.xowl.lang.actions.Element domain) {
            this.domain = domain;
        }
    }
    private elemValue_impl dataElemValue;
    public org.xowl.lang.actions.Element.elemValue __getImplOfelemValue() { return dataElemValue; }
    public boolean setElemValue(org.xowl.lang.owl2.Expression elem) {
        if (dataElemValue.get() != null) {
            if (elem == null) {
                if (!dataElemValue.user_check_remove(dataElemValue.get())) return false;
                dataElemValue.user_remove(dataElemValue.get());
            } else {
                if (!dataElemValue.user_check_replace(dataElemValue.get(), elem)) return false;
                dataElemValue.user_remove(dataElemValue.get());
                dataElemValue.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataElemValue.user_check_add(elem)) return false;
            dataElemValue.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getElemValue() { return dataElemValue.get(); }
    // </editor-fold>

    public Element() {
        dataElemIndex = new elemIndex_impl(this);
        dataElemValue = new elemValue_impl(this);
    }
    
}
