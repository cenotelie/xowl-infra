/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class Assign implements org.xowl.lang.actions.Statement, org.xowl.lang.actions.Assign_OR_Declare_OR_For_OR_ForEach, org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return, org.xowl.lang.owl2.Axiom_OR_Statement {
    // <editor-fold defaultstate="collapsed" desc="Property line">
    private static class line_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.line {
        private org.xowl.lang.actions.Assign domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public line_impl(org.xowl.lang.actions.Assign domain) {
            this.domain = domain;
        }
    }
    private line_impl dataLine;
    public org.xowl.lang.owl2.Axiom_OR_Statement.line __getImplOfline() { return dataLine; }
    public boolean setLine(java.lang.Integer elem) {
        dataLine.simple_add(elem);
        return true;
    }
    public java.lang.Integer getLine() { return dataLine.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property variable">
    private static class variable_impl implements org.xowl.lang.actions.Assign_OR_Declare_OR_For_OR_ForEach.variable {
        private org.xowl.lang.actions.Assign domain;
        private org.xowl.lang.actions.CodeVariable data;
        public org.xowl.lang.actions.CodeVariable get_raw() { return data; }
        public org.xowl.lang.actions.CodeVariable get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.CodeVariable elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.CodeVariable elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.CodeVariable elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.CodeVariable elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.CodeVariable elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        public variable_impl(org.xowl.lang.actions.Assign domain) {
            this.domain = domain;
        }
    }
    private variable_impl dataVariable;
    public org.xowl.lang.actions.Assign_OR_Declare_OR_For_OR_ForEach.variable __getImplOfvariable() { return dataVariable; }
    public boolean setVariable(org.xowl.lang.actions.CodeVariable elem) {
        if (dataVariable.get() != null) {
            if (elem == null) {
                if (!dataVariable.user_check_remove(dataVariable.get())) return false;
                dataVariable.user_remove(dataVariable.get());
            } else {
                if (!dataVariable.user_check_replace(dataVariable.get(), elem)) return false;
                dataVariable.user_remove(dataVariable.get());
                dataVariable.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataVariable.user_check_add(elem)) return false;
            dataVariable.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.CodeVariable getVariable() { return dataVariable.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property literalSeq">
    public static interface literalSeq {
        boolean check_contains(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean user_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean user_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean user_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem);
        void user_add(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        void user_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean inverse_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean inverse_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        boolean inverse_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem);
        void inverse_add(org.xowl.lang.owl2.LiteralSequenceExpression elem);
        void inverse_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem);
    }
    private static class literalSeq_impl implements org.xowl.lang.actions.Assign.literalSeq {
        private org.xowl.lang.actions.Assign domain;
        private org.xowl.lang.owl2.LiteralSequenceExpression data;
        public org.xowl.lang.owl2.LiteralSequenceExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralSequenceExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralSequenceExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralSequenceExpression oldElem, org.xowl.lang.owl2.LiteralSequenceExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
            tree_remove(elem);
        }
        public literalSeq_impl(org.xowl.lang.actions.Assign domain) {
            this.domain = domain;
        }
    }
    private literalSeq_impl dataLiteralSeq;
    public org.xowl.lang.actions.Assign.literalSeq __getImplOfliteralSeq() { return dataLiteralSeq; }
    public boolean setLiteralSeq(org.xowl.lang.owl2.LiteralSequenceExpression elem) {
        if (dataLiteralSeq.get() != null) {
            if (elem == null) {
                if (!dataLiteralSeq.user_check_remove(dataLiteralSeq.get())) return false;
                dataLiteralSeq.user_remove(dataLiteralSeq.get());
            } else {
                if (!dataLiteralSeq.user_check_replace(dataLiteralSeq.get(), elem)) return false;
                dataLiteralSeq.user_remove(dataLiteralSeq.get());
                dataLiteralSeq.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataLiteralSeq.user_check_add(elem)) return false;
            dataLiteralSeq.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralSequenceExpression getLiteralSeq() { return dataLiteralSeq.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property expression">
    private static class expression_impl implements org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return.expression {
        private org.xowl.lang.actions.Assign domain;
        private org.xowl.lang.owl2.Expression data;
        public org.xowl.lang.owl2.Expression get_raw() { return data; }
        public org.xowl.lang.owl2.Expression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.Expression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.Expression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.Expression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.Expression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.Expression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        public expression_impl(org.xowl.lang.actions.Assign domain) {
            this.domain = domain;
        }
    }
    private expression_impl dataExpression;
    public org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return.expression __getImplOfexpression() { return dataExpression; }
    public boolean setExpression(org.xowl.lang.owl2.Expression elem) {
        if (dataExpression.get() != null) {
            if (elem == null) {
                if (!dataExpression.user_check_remove(dataExpression.get())) return false;
                dataExpression.user_remove(dataExpression.get());
            } else {
                if (!dataExpression.user_check_replace(dataExpression.get(), elem)) return false;
                dataExpression.user_remove(dataExpression.get());
                dataExpression.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataExpression.user_check_add(elem)) return false;
            dataExpression.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getExpressionAs(org.xowl.lang.owl2.Expression type) { return dataExpression.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property file">
    private static class file_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.file {
        private org.xowl.lang.actions.Assign domain;
        private java.lang.String data;
        public java.lang.String get_raw() { return data; }
        public java.lang.String get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.String elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.String elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.String elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.String elem) {
            data = elem;
        }
        public void simple_remove(java.lang.String elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.String elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.String elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.String elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.String elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        public file_impl(org.xowl.lang.actions.Assign domain) {
            this.domain = domain;
        }
    }
    private file_impl dataFile;
    public org.xowl.lang.owl2.Axiom_OR_Statement.file __getImplOffile() { return dataFile; }
    public boolean setFile(java.lang.String elem) {
        dataFile.simple_add(elem);
        return true;
    }
    public java.lang.String getFile() { return dataFile.get(); }
    // </editor-fold>

    public Assign() {
        dataLine = new line_impl(this);
        dataVariable = new variable_impl(this);
        dataLiteralSeq = new literalSeq_impl(this);
        dataExpression = new expression_impl(this);
        dataFile = new file_impl(this);
    }
    
}
