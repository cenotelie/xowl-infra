/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class Lambda implements org.xowl.lang.actions.ExecutableExpression, org.xowl.lang.actions.Block_OR_Lambda_OR_LoopStatement, org.xowl.lang.owl2.Expression {
    // <editor-fold defaultstate="collapsed" desc="Property boundVars">
    public static interface boundVars {
        boolean check_contains(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_add(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem);
        void user_add(org.xowl.lang.actions.CodeVariable elem);
        void user_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_add(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem);
        void inverse_add(org.xowl.lang.actions.CodeVariable elem);
        void inverse_remove(org.xowl.lang.actions.CodeVariable elem);
    }
    private static class boundVars_impl implements org.xowl.lang.actions.Lambda.boundVars {
        private org.xowl.lang.actions.Lambda domain;
        private java.util.List<org.xowl.lang.actions.CodeVariable> data;
        public java.util.Collection<org.xowl.lang.actions.CodeVariable> get_raw() { return new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>(data); }
        public java.util.Collection<org.xowl.lang.actions.CodeVariable> get() { return new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.CodeVariable elem) { return (data.contains(elem)); }
        public boolean simple_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.CodeVariable elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.actions.CodeVariable elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.CodeVariable elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.CodeVariable elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        public boundVars_impl(org.xowl.lang.actions.Lambda domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>();
        }
    }
    private boundVars_impl dataBoundVars;
    public org.xowl.lang.actions.Lambda.boundVars __getImplOfboundVars() { return dataBoundVars; }
    public boolean addBoundVars(org.xowl.lang.actions.CodeVariable elem) {
        if (!dataBoundVars.user_check_add(elem)) return false;
        dataBoundVars.user_add(elem);
        return true;
    }
    public boolean removeBoundVars(org.xowl.lang.actions.CodeVariable elem) {
        if (!dataBoundVars.user_check_remove(elem)) return false;
        dataBoundVars.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.actions.CodeVariable> getAllBoundVars() { return dataBoundVars.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property freeVars">
    public static interface freeVars {
        boolean check_contains(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_add(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean user_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem);
        void user_add(org.xowl.lang.actions.CodeVariable elem);
        void user_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_add(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_remove(org.xowl.lang.actions.CodeVariable elem);
        boolean inverse_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem);
        void inverse_add(org.xowl.lang.actions.CodeVariable elem);
        void inverse_remove(org.xowl.lang.actions.CodeVariable elem);
    }
    private static class freeVars_impl implements org.xowl.lang.actions.Lambda.freeVars {
        private org.xowl.lang.actions.Lambda domain;
        private java.util.List<org.xowl.lang.actions.CodeVariable> data;
        public java.util.Collection<org.xowl.lang.actions.CodeVariable> get_raw() { return new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>(data); }
        public java.util.Collection<org.xowl.lang.actions.CodeVariable> get() { return new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>(data); }
        private boolean check_card(int modifier) {
            int card = data.size() + 0 + modifier;
            return (card >= 0 && card <= 2147483647);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.CodeVariable elem) { return (data.contains(elem)); }
        public boolean simple_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.CodeVariable elem) {
            data.add(elem);
        }
        public void simple_remove(org.xowl.lang.actions.CodeVariable elem) {
            data.remove(elem);
        }
        private boolean tree_check_add(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.CodeVariable elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.CodeVariable elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.CodeVariable elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.CodeVariable oldElem, org.xowl.lang.actions.CodeVariable  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.CodeVariable elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.CodeVariable elem) {
            tree_remove(elem);
        }
        public freeVars_impl(org.xowl.lang.actions.Lambda domain) {
            this.domain = domain;
            this.data = new java.util.ArrayList<org.xowl.lang.actions.CodeVariable>();
        }
    }
    private freeVars_impl dataFreeVars;
    public org.xowl.lang.actions.Lambda.freeVars __getImplOffreeVars() { return dataFreeVars; }
    public boolean addFreeVars(org.xowl.lang.actions.CodeVariable elem) {
        if (!dataFreeVars.user_check_add(elem)) return false;
        dataFreeVars.user_add(elem);
        return true;
    }
    public boolean removeFreeVars(org.xowl.lang.actions.CodeVariable elem) {
        if (!dataFreeVars.user_check_remove(elem)) return false;
        dataFreeVars.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.actions.CodeVariable> getAllFreeVars() { return dataFreeVars.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property contains">
    private static class contains_impl implements org.xowl.lang.actions.Block_OR_Lambda_OR_LoopStatement.contains {
        private org.xowl.lang.actions.Lambda domain;
        private org.xowl.lang.actions.Statement data;
        public org.xowl.lang.actions.Statement get_raw() { return data; }
        public org.xowl.lang.actions.Statement get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 1 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.Statement elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.Statement elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.Statement elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.Statement elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.Statement elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.Statement elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        public contains_impl(org.xowl.lang.actions.Lambda domain) {
            this.domain = domain;
        }
    }
    private contains_impl dataContains;
    public org.xowl.lang.actions.Block_OR_Lambda_OR_LoopStatement.contains __getImplOfcontains() { return dataContains; }
    public boolean addContains(org.xowl.lang.actions.Statement elem) {
        if (!dataContains.user_check_add(elem)) return false;
        dataContains.user_add(elem);
        return true;
    }
    public boolean removeContains(org.xowl.lang.actions.Statement elem) {
        if (!dataContains.user_check_remove(elem)) return false;
        dataContains.user_remove(elem);
        return true;
    }
    public java.util.Collection<org.xowl.lang.actions.Statement> getAllContains() {
        java.util.List<org.xowl.lang.actions.Statement> result = new java.util.ArrayList<org.xowl.lang.actions.Statement>();
        if (dataContains.get() != null)
            result.add(dataContains.get());
        return result;
    }
    public boolean setContains(org.xowl.lang.actions.Statement elem) {
        if (dataContains.get() != null) {
            if (elem == null) {
                if (!dataContains.user_check_remove(dataContains.get())) return false;
                dataContains.user_remove(dataContains.get());
            } else {
                if (!dataContains.user_check_replace(dataContains.get(), elem)) return false;
                dataContains.user_remove(dataContains.get());
                dataContains.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataContains.user_check_add(elem)) return false;
            dataContains.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.Statement getContains() { return dataContains.get(); }
    // </editor-fold>

    public Lambda() {
        dataBoundVars = new boundVars_impl(this);
        dataFreeVars = new freeVars_impl(this);
        dataContains = new contains_impl(this);
    }
    
}
