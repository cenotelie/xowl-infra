/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class Slice implements org.xowl.lang.actions.ArrayExpression, org.xowl.lang.actions.ArrayElement_OR_ForEach_OR_LengthOf_OR_Slice_OR_ToSeq, org.xowl.lang.owl2.Expression {
    // <editor-fold defaultstate="collapsed" desc="Property upperBound">
    public static interface upperBound {
        boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void user_add(org.xowl.lang.owl2.LiteralExpression elem);
        void user_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void inverse_add(org.xowl.lang.owl2.LiteralExpression elem);
        void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem);
    }
    private static class upperBound_impl implements org.xowl.lang.actions.Slice.upperBound {
        private org.xowl.lang.actions.Slice domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        public upperBound_impl(org.xowl.lang.actions.Slice domain) {
            this.domain = domain;
        }
    }
    private upperBound_impl dataUpperBound;
    public org.xowl.lang.actions.Slice.upperBound __getImplOfupperBound() { return dataUpperBound; }
    public boolean setUpperBound(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataUpperBound.get() != null) {
            if (elem == null) {
                if (!dataUpperBound.user_check_remove(dataUpperBound.get())) return false;
                dataUpperBound.user_remove(dataUpperBound.get());
            } else {
                if (!dataUpperBound.user_check_replace(dataUpperBound.get(), elem)) return false;
                dataUpperBound.user_remove(dataUpperBound.get());
                dataUpperBound.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataUpperBound.user_check_add(elem)) return false;
            dataUpperBound.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getUpperBound() { return dataUpperBound.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property array">
    private static class array_impl implements org.xowl.lang.actions.ArrayElement_OR_ForEach_OR_LengthOf_OR_Slice_OR_ToSeq.array {
        private org.xowl.lang.actions.Slice domain;
        private org.xowl.lang.actions.ArrayExpression data;
        public org.xowl.lang.actions.ArrayExpression get_raw() { return data; }
        public org.xowl.lang.actions.ArrayExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.ArrayExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.ArrayExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.ArrayExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.ArrayExpression oldElem, org.xowl.lang.actions.ArrayExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.ArrayExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.ArrayExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.ArrayExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.ArrayExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.ArrayExpression oldElem, org.xowl.lang.actions.ArrayExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.ArrayExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.ArrayExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.ArrayExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.ArrayExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.ArrayExpression oldElem, org.xowl.lang.actions.ArrayExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.ArrayExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.ArrayExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.ArrayExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.ArrayExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.ArrayExpression oldElem, org.xowl.lang.actions.ArrayExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.ArrayExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.ArrayExpression elem) {
            tree_remove(elem);
        }
        public array_impl(org.xowl.lang.actions.Slice domain) {
            this.domain = domain;
        }
    }
    private array_impl dataArray;
    public org.xowl.lang.actions.ArrayElement_OR_ForEach_OR_LengthOf_OR_Slice_OR_ToSeq.array __getImplOfarray() { return dataArray; }
    public boolean setArray(org.xowl.lang.actions.ArrayExpression elem) {
        if (dataArray.get() != null) {
            if (elem == null) {
                if (!dataArray.user_check_remove(dataArray.get())) return false;
                dataArray.user_remove(dataArray.get());
            } else {
                if (!dataArray.user_check_replace(dataArray.get(), elem)) return false;
                dataArray.user_remove(dataArray.get());
                dataArray.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataArray.user_check_add(elem)) return false;
            dataArray.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.ArrayExpression getArray() { return dataArray.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property lowerBound">
    public static interface lowerBound {
        boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void user_add(org.xowl.lang.owl2.LiteralExpression elem);
        void user_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem);
        boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem);
        void inverse_add(org.xowl.lang.owl2.LiteralExpression elem);
        void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem);
    }
    private static class lowerBound_impl implements org.xowl.lang.actions.Slice.lowerBound {
        private org.xowl.lang.actions.Slice domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        public lowerBound_impl(org.xowl.lang.actions.Slice domain) {
            this.domain = domain;
        }
    }
    private lowerBound_impl dataLowerBound;
    public org.xowl.lang.actions.Slice.lowerBound __getImplOflowerBound() { return dataLowerBound; }
    public boolean setLowerBound(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataLowerBound.get() != null) {
            if (elem == null) {
                if (!dataLowerBound.user_check_remove(dataLowerBound.get())) return false;
                dataLowerBound.user_remove(dataLowerBound.get());
            } else {
                if (!dataLowerBound.user_check_replace(dataLowerBound.get(), elem)) return false;
                dataLowerBound.user_remove(dataLowerBound.get());
                dataLowerBound.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataLowerBound.user_check_add(elem)) return false;
            dataLowerBound.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getLowerBound() { return dataLowerBound.get(); }
    // </editor-fold>

    public Slice() {
        dataUpperBound = new upperBound_impl(this);
        dataArray = new array_impl(this);
        dataLowerBound = new lowerBound_impl(this);
    }
    
}
