/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class BNot implements org.xowl.lang.actions.Predicate, org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return, org.xowl.lang.owl2.LiteralExpression, org.xowl.lang.owl2.Expression {
    // <editor-fold defaultstate="collapsed" desc="Property expression">
    private static class expression_impl implements org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return.expression {
        private org.xowl.lang.actions.BNot domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) {
            if (!(elem instanceof org.xowl.lang.owl2.LiteralExpression)) return false;
            return (data == elem);
        }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) { return user_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) { return user_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return user_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) { user_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) { user_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) { return inverse_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) { return inverse_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return inverse_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) { inverse_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) { inverse_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public expression_impl(org.xowl.lang.actions.BNot domain) {
            this.domain = domain;
        }
    }
    private expression_impl dataExpression;
    public org.xowl.lang.actions.Assign_OR_BNot_OR_Declare_OR_ExpressionElement_OR_For_OR_Return.expression __getImplOfexpression() { return dataExpression; }
    public boolean setExpression(org.xowl.lang.owl2.Expression elem) {
        if (dataExpression.get() != null) {
            if (elem == null) {
                if (!dataExpression.user_check_remove(dataExpression.get())) return false;
                dataExpression.user_remove(dataExpression.get());
            } else {
                if (!dataExpression.user_check_replace(dataExpression.get(), (org.xowl.lang.owl2.LiteralExpression)elem)) return false;
                dataExpression.user_remove(dataExpression.get());
                dataExpression.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataExpression.user_check_add((org.xowl.lang.owl2.LiteralExpression)elem)) return false;
            dataExpression.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getExpressionAs(org.xowl.lang.owl2.Expression type) { return dataExpression.get(); }
    public boolean setExpression(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataExpression.get() != null) {
            if (elem == null) {
                if (!dataExpression.user_check_remove(dataExpression.get())) return false;
                dataExpression.user_remove(dataExpression.get());
            } else {
                if (!dataExpression.user_check_replace(dataExpression.get(), elem)) return false;
                dataExpression.user_remove(dataExpression.get());
                dataExpression.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataExpression.user_check_add(elem)) return false;
            dataExpression.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getExpressionAs(org.xowl.lang.owl2.LiteralExpression type) { return dataExpression.get(); }
    // </editor-fold>

    public BNot() {
        dataExpression = new expression_impl(this);
    }
    
}
