/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class If implements org.xowl.lang.actions.Statement, org.xowl.lang.actions.For_OR_If_OR_While, org.xowl.lang.owl2.Axiom_OR_Statement {
    // <editor-fold defaultstate="collapsed" desc="Property line">
    private static class line_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.line {
        private org.xowl.lang.actions.If domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public line_impl(org.xowl.lang.actions.If domain) {
            this.domain = domain;
        }
    }
    private line_impl dataLine;
    public org.xowl.lang.owl2.Axiom_OR_Statement.line __getImplOfline() { return dataLine; }
    public boolean setLine(java.lang.Integer elem) {
        dataLine.simple_add(elem);
        return true;
    }
    public java.lang.Integer getLine() { return dataLine.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property branchFalse">
    public static interface branchFalse {
        boolean check_contains(org.xowl.lang.actions.Statement elem);
        boolean user_check_add(org.xowl.lang.actions.Statement elem);
        boolean user_check_remove(org.xowl.lang.actions.Statement elem);
        boolean user_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem);
        void user_add(org.xowl.lang.actions.Statement elem);
        void user_remove(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_add(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_remove(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem);
        void inverse_add(org.xowl.lang.actions.Statement elem);
        void inverse_remove(org.xowl.lang.actions.Statement elem);
    }
    private static class branchFalse_impl implements org.xowl.lang.actions.If.branchFalse {
        private org.xowl.lang.actions.If domain;
        private org.xowl.lang.actions.Statement data;
        public org.xowl.lang.actions.Statement get_raw() { return data; }
        public org.xowl.lang.actions.Statement get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.Statement elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.Statement elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.Statement elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.Statement elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.Statement elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.Statement elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        public branchFalse_impl(org.xowl.lang.actions.If domain) {
            this.domain = domain;
        }
    }
    private branchFalse_impl dataBranchFalse;
    public org.xowl.lang.actions.If.branchFalse __getImplOfbranchFalse() { return dataBranchFalse; }
    public boolean setBranchFalse(org.xowl.lang.actions.Statement elem) {
        if (dataBranchFalse.get() != null) {
            if (elem == null) {
                if (!dataBranchFalse.user_check_remove(dataBranchFalse.get())) return false;
                dataBranchFalse.user_remove(dataBranchFalse.get());
            } else {
                if (!dataBranchFalse.user_check_replace(dataBranchFalse.get(), elem)) return false;
                dataBranchFalse.user_remove(dataBranchFalse.get());
                dataBranchFalse.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataBranchFalse.user_check_add(elem)) return false;
            dataBranchFalse.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.Statement getBranchFalse() { return dataBranchFalse.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property branchTrue">
    public static interface branchTrue {
        boolean check_contains(org.xowl.lang.actions.Statement elem);
        boolean user_check_add(org.xowl.lang.actions.Statement elem);
        boolean user_check_remove(org.xowl.lang.actions.Statement elem);
        boolean user_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem);
        void user_add(org.xowl.lang.actions.Statement elem);
        void user_remove(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_add(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_remove(org.xowl.lang.actions.Statement elem);
        boolean inverse_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem);
        void inverse_add(org.xowl.lang.actions.Statement elem);
        void inverse_remove(org.xowl.lang.actions.Statement elem);
    }
    private static class branchTrue_impl implements org.xowl.lang.actions.If.branchTrue {
        private org.xowl.lang.actions.If domain;
        private org.xowl.lang.actions.Statement data;
        public org.xowl.lang.actions.Statement get_raw() { return data; }
        public org.xowl.lang.actions.Statement get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.Statement elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.Statement elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.Statement elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.Statement elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.Statement elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.Statement elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.Statement elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.Statement elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.Statement elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.Statement oldElem, org.xowl.lang.actions.Statement  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.Statement elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.Statement elem) {
            tree_remove(elem);
        }
        public branchTrue_impl(org.xowl.lang.actions.If domain) {
            this.domain = domain;
        }
    }
    private branchTrue_impl dataBranchTrue;
    public org.xowl.lang.actions.If.branchTrue __getImplOfbranchTrue() { return dataBranchTrue; }
    public boolean setBranchTrue(org.xowl.lang.actions.Statement elem) {
        if (dataBranchTrue.get() != null) {
            if (elem == null) {
                if (!dataBranchTrue.user_check_remove(dataBranchTrue.get())) return false;
                dataBranchTrue.user_remove(dataBranchTrue.get());
            } else {
                if (!dataBranchTrue.user_check_replace(dataBranchTrue.get(), elem)) return false;
                dataBranchTrue.user_remove(dataBranchTrue.get());
                dataBranchTrue.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataBranchTrue.user_check_add(elem)) return false;
            dataBranchTrue.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.Statement getBranchTrue() { return dataBranchTrue.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property condition">
    private static class condition_impl implements org.xowl.lang.actions.For_OR_If_OR_While.condition {
        private org.xowl.lang.actions.If domain;
        private org.xowl.lang.owl2.Expression data;
        public org.xowl.lang.owl2.Expression get_raw() { return data; }
        public org.xowl.lang.owl2.Expression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.owl2.Expression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.Expression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.Expression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.Expression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.Expression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.Expression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) {
            tree_remove(elem);
        }
        public condition_impl(org.xowl.lang.actions.If domain) {
            this.domain = domain;
        }
    }
    private condition_impl dataCondition;
    public org.xowl.lang.actions.For_OR_If_OR_While.condition __getImplOfcondition() { return dataCondition; }
    public boolean setCondition(org.xowl.lang.owl2.Expression elem) {
        if (dataCondition.get() != null) {
            if (elem == null) {
                if (!dataCondition.user_check_remove(dataCondition.get())) return false;
                dataCondition.user_remove(dataCondition.get());
            } else {
                if (!dataCondition.user_check_replace(dataCondition.get(), elem)) return false;
                dataCondition.user_remove(dataCondition.get());
                dataCondition.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataCondition.user_check_add(elem)) return false;
            dataCondition.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getCondition() { return dataCondition.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property file">
    private static class file_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.file {
        private org.xowl.lang.actions.If domain;
        private java.lang.String data;
        public java.lang.String get_raw() { return data; }
        public java.lang.String get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.String elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.String elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.String elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.String elem) {
            data = elem;
        }
        public void simple_remove(java.lang.String elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.String elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.String elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.String elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.String elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        public file_impl(org.xowl.lang.actions.If domain) {
            this.domain = domain;
        }
    }
    private file_impl dataFile;
    public org.xowl.lang.owl2.Axiom_OR_Statement.file __getImplOffile() { return dataFile; }
    public boolean setFile(java.lang.String elem) {
        dataFile.simple_add(elem);
        return true;
    }
    public java.lang.String getFile() { return dataFile.get(); }
    // </editor-fold>

    public If() {
        dataLine = new line_impl(this);
        dataBranchFalse = new branchFalse_impl(this);
        dataBranchTrue = new branchTrue_impl(this);
        dataCondition = new condition_impl(this);
        dataFile = new file_impl(this);
    }
    
}
