/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class Invoke implements org.xowl.lang.actions.Execution, org.xowl.lang.actions.FunctionAxiom_OR_Invoke, org.xowl.lang.actions.ArrayExpression, org.xowl.lang.actions.ExecutableExpression, org.xowl.lang.actions.FunctionExpression, org.xowl.lang.actions.Statement, org.xowl.lang.owl2.ClassExpression, org.xowl.lang.owl2.DataPropertyExpression, org.xowl.lang.owl2.Datarange, org.xowl.lang.owl2.EntityExpression, org.xowl.lang.owl2.IndividualExpression, org.xowl.lang.owl2.LiteralExpression, org.xowl.lang.owl2.ObjectPropertyExpression, org.xowl.lang.interop.JavaObjectExpression, org.xowl.lang.owl2.Expression, org.xowl.lang.owl2.Axiom_OR_Statement {
    // <editor-fold defaultstate="collapsed" desc="Property line">
    private static class line_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.line {
        private org.xowl.lang.actions.Invoke domain;
        private java.lang.Integer data;
        public java.lang.Integer get_raw() { return data; }
        public java.lang.Integer get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.Integer elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.Integer elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.Integer elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.Integer elem) {
            data = elem;
        }
        public void simple_remove(java.lang.Integer elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.Integer elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.Integer elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.Integer elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.Integer elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.Integer elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.Integer elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.Integer oldElem, java.lang.Integer  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.Integer elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.Integer elem) {
            tree_remove(elem);
        }
        public line_impl(org.xowl.lang.actions.Invoke domain) {
            this.domain = domain;
        }
    }
    private line_impl dataLine;
    public org.xowl.lang.owl2.Axiom_OR_Statement.line __getImplOfline() { return dataLine; }
    public boolean setLine(java.lang.Integer elem) {
        dataLine.simple_add(elem);
        return true;
    }
    public java.lang.Integer getLine() { return dataLine.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property function">
    private static class function_impl implements org.xowl.lang.actions.FunctionAxiom_OR_Invoke.function {
        private org.xowl.lang.actions.Invoke domain;
        private org.xowl.lang.actions.FunctionExpression data;
        public org.xowl.lang.actions.FunctionExpression get_raw() { return data; }
        public org.xowl.lang.actions.FunctionExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.FunctionExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.FunctionExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.FunctionExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.FunctionExpression oldElem, org.xowl.lang.actions.FunctionExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.FunctionExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.FunctionExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.FunctionExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.FunctionExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.FunctionExpression oldElem, org.xowl.lang.actions.FunctionExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.FunctionExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.FunctionExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.FunctionExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.FunctionExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.FunctionExpression oldElem, org.xowl.lang.actions.FunctionExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.FunctionExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.FunctionExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.FunctionExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.FunctionExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.FunctionExpression oldElem, org.xowl.lang.actions.FunctionExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.FunctionExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.FunctionExpression elem) {
            tree_remove(elem);
        }
        public function_impl(org.xowl.lang.actions.Invoke domain) {
            this.domain = domain;
        }
    }
    private function_impl dataFunction;
    public org.xowl.lang.actions.FunctionAxiom_OR_Invoke.function __getImplOffunction() { return dataFunction; }
    public boolean setFunction(org.xowl.lang.actions.FunctionExpression elem) {
        if (dataFunction.get() != null) {
            if (elem == null) {
                if (!dataFunction.user_check_remove(dataFunction.get())) return false;
                dataFunction.user_remove(dataFunction.get());
            } else {
                if (!dataFunction.user_check_replace(dataFunction.get(), elem)) return false;
                dataFunction.user_remove(dataFunction.get());
                dataFunction.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataFunction.user_check_add(elem)) return false;
            dataFunction.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.FunctionExpression getFunction() { return dataFunction.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property valueSeq">
    private static class valueSeq_impl implements org.xowl.lang.actions.Execution.valueSeq {
        private org.xowl.lang.actions.Invoke domain;
        private org.xowl.lang.actions.ExpressionSequenceExpression data;
        public org.xowl.lang.actions.ExpressionSequenceExpression get_raw() { return data; }
        public org.xowl.lang.actions.ExpressionSequenceExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.lang.actions.ExpressionSequenceExpression elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.actions.ExpressionSequenceExpression oldElem, org.xowl.lang.actions.ExpressionSequenceExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.actions.ExpressionSequenceExpression oldElem, org.xowl.lang.actions.ExpressionSequenceExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.lang.actions.ExpressionSequenceExpression oldElem, org.xowl.lang.actions.ExpressionSequenceExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.lang.actions.ExpressionSequenceExpression oldElem, org.xowl.lang.actions.ExpressionSequenceExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
            tree_remove(elem);
        }
        public valueSeq_impl(org.xowl.lang.actions.Invoke domain) {
            this.domain = domain;
        }
    }
    private valueSeq_impl dataValueSeq;
    public org.xowl.lang.actions.Execution.valueSeq __getImplOfvalueSeq() { return dataValueSeq; }
    public boolean setValueSeq(org.xowl.lang.actions.ExpressionSequenceExpression elem) {
        if (dataValueSeq.get() != null) {
            if (elem == null) {
                if (!dataValueSeq.user_check_remove(dataValueSeq.get())) return false;
                dataValueSeq.user_remove(dataValueSeq.get());
            } else {
                if (!dataValueSeq.user_check_replace(dataValueSeq.get(), elem)) return false;
                dataValueSeq.user_remove(dataValueSeq.get());
                dataValueSeq.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataValueSeq.user_check_add(elem)) return false;
            dataValueSeq.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.actions.ExpressionSequenceExpression getValueSeq() { return dataValueSeq.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property file">
    private static class file_impl implements org.xowl.lang.owl2.Axiom_OR_Statement.file {
        private org.xowl.lang.actions.Invoke domain;
        private java.lang.String data;
        public java.lang.String get_raw() { return data; }
        public java.lang.String get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(java.lang.String elem) { return data.equals(elem); }
        public boolean simple_check_add(java.lang.String elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(java.lang.String elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(java.lang.String elem) {
            data = elem;
        }
        public void simple_remove(java.lang.String elem) {
            data = null;
        }
        private boolean tree_check_add(java.lang.String elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(java.lang.String elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(java.lang.String elem) {
            simple_add(elem);
        }
        private void tree_remove(java.lang.String elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void user_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(java.lang.String elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(java.lang.String elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(java.lang.String oldElem, java.lang.String  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(java.lang.String elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(java.lang.String elem) {
            tree_remove(elem);
        }
        public file_impl(org.xowl.lang.actions.Invoke domain) {
            this.domain = domain;
        }
    }
    private file_impl dataFile;
    public org.xowl.lang.owl2.Axiom_OR_Statement.file __getImplOffile() { return dataFile; }
    public boolean setFile(java.lang.String elem) {
        dataFile.simple_add(elem);
        return true;
    }
    public java.lang.String getFile() { return dataFile.get(); }
    // </editor-fold>

    public Invoke() {
        dataLine = new line_impl(this);
        dataFunction = new function_impl(this);
        dataValueSeq = new valueSeq_impl(this);
        dataFile = new file_impl(this);
    }
    
}
