/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.lang.actions;

public class LesserEqual implements org.xowl.lang.actions.TestOperator, org.xowl.lang.actions.Predicate, org.xowl.lang.actions.ArithmeticOperator_OR_BinaryBooleanOperator_OR_TestOperator, org.xowl.lang.owl2.LiteralExpression, org.xowl.lang.owl2.Expression {
    // <editor-fold defaultstate="collapsed" desc="Property lhs">
    private static class lhs_impl implements org.xowl.lang.actions.ArithmeticOperator_OR_BinaryBooleanOperator_OR_TestOperator.lhs {
        private org.xowl.lang.actions.LesserEqual domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) {
            if (!(elem instanceof org.xowl.lang.owl2.LiteralExpression)) return false;
            return (data == elem);
        }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) { return user_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) { return user_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return user_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) { user_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) { user_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) { return inverse_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) { return inverse_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return inverse_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) { inverse_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) { inverse_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public lhs_impl(org.xowl.lang.actions.LesserEqual domain) {
            this.domain = domain;
        }
    }
    private lhs_impl dataLhs;
    public org.xowl.lang.actions.ArithmeticOperator_OR_BinaryBooleanOperator_OR_TestOperator.lhs __getImplOflhs() { return dataLhs; }
    public boolean setLhs(org.xowl.lang.owl2.Expression elem) {
        if (dataLhs.get() != null) {
            if (elem == null) {
                if (!dataLhs.user_check_remove(dataLhs.get())) return false;
                dataLhs.user_remove(dataLhs.get());
            } else {
                if (!dataLhs.user_check_replace(dataLhs.get(), (org.xowl.lang.owl2.LiteralExpression)elem)) return false;
                dataLhs.user_remove(dataLhs.get());
                dataLhs.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataLhs.user_check_add((org.xowl.lang.owl2.LiteralExpression)elem)) return false;
            dataLhs.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getLhsAs(org.xowl.lang.owl2.Expression type) { return dataLhs.get(); }
    public boolean setLhs(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataLhs.get() != null) {
            if (elem == null) {
                if (!dataLhs.user_check_remove(dataLhs.get())) return false;
                dataLhs.user_remove(dataLhs.get());
            } else {
                if (!dataLhs.user_check_replace(dataLhs.get(), elem)) return false;
                dataLhs.user_remove(dataLhs.get());
                dataLhs.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataLhs.user_check_add(elem)) return false;
            dataLhs.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getLhsAs(org.xowl.lang.owl2.LiteralExpression type) { return dataLhs.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property rhs">
    private static class rhs_impl implements org.xowl.lang.actions.ArithmeticOperator_OR_BinaryBooleanOperator_OR_TestOperator.rhs {
        private org.xowl.lang.actions.LesserEqual domain;
        private org.xowl.lang.owl2.LiteralExpression data;
        public org.xowl.lang.owl2.LiteralExpression get_raw() { return data; }
        public org.xowl.lang.owl2.LiteralExpression get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        public boolean check_contains(org.xowl.lang.owl2.LiteralExpression elem) { return (data == elem); }
        @Override public boolean check_contains(org.xowl.lang.owl2.Expression elem) {
            if (!(elem instanceof org.xowl.lang.owl2.LiteralExpression)) return false;
            return (data == elem);
        }
        public boolean simple_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.lang.owl2.LiteralExpression elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            simple_remove(elem);
        }
        public boolean user_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean user_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean user_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void user_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void user_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.lang.owl2.Expression elem) { return user_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_remove(org.xowl.lang.owl2.Expression elem) { return user_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean user_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return user_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void user_add(org.xowl.lang.owl2.Expression elem) { user_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void user_remove(org.xowl.lang.owl2.Expression elem) { user_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public boolean inverse_check_add(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_add(elem);
        }
        public boolean inverse_check_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            return tree_check_remove(elem);
        }
        public boolean inverse_check_replace(org.xowl.lang.owl2.LiteralExpression oldElem, org.xowl.lang.owl2.LiteralExpression  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        public void inverse_add(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_add(elem);
        }
        public void inverse_remove(org.xowl.lang.owl2.LiteralExpression elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.lang.owl2.Expression elem) { return inverse_check_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_remove(org.xowl.lang.owl2.Expression elem) { return inverse_check_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public boolean inverse_check_replace(org.xowl.lang.owl2.Expression oldElem, org.xowl.lang.owl2.Expression  newElem) { return inverse_check_replace((org.xowl.lang.owl2.LiteralExpression)oldElem, (org.xowl.lang.owl2.LiteralExpression)newElem); }
        @Override public void inverse_add(org.xowl.lang.owl2.Expression elem) { inverse_add((org.xowl.lang.owl2.LiteralExpression)elem); }
        @Override public void inverse_remove(org.xowl.lang.owl2.Expression elem) { inverse_remove((org.xowl.lang.owl2.LiteralExpression)elem); }
        public rhs_impl(org.xowl.lang.actions.LesserEqual domain) {
            this.domain = domain;
        }
    }
    private rhs_impl dataRhs;
    public org.xowl.lang.actions.ArithmeticOperator_OR_BinaryBooleanOperator_OR_TestOperator.rhs __getImplOfrhs() { return dataRhs; }
    public boolean setRhs(org.xowl.lang.owl2.Expression elem) {
        if (dataRhs.get() != null) {
            if (elem == null) {
                if (!dataRhs.user_check_remove(dataRhs.get())) return false;
                dataRhs.user_remove(dataRhs.get());
            } else {
                if (!dataRhs.user_check_replace(dataRhs.get(), (org.xowl.lang.owl2.LiteralExpression)elem)) return false;
                dataRhs.user_remove(dataRhs.get());
                dataRhs.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataRhs.user_check_add((org.xowl.lang.owl2.LiteralExpression)elem)) return false;
            dataRhs.user_add((org.xowl.lang.owl2.LiteralExpression)elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.Expression getRhsAs(org.xowl.lang.owl2.Expression type) { return dataRhs.get(); }
    public boolean setRhs(org.xowl.lang.owl2.LiteralExpression elem) {
        if (dataRhs.get() != null) {
            if (elem == null) {
                if (!dataRhs.user_check_remove(dataRhs.get())) return false;
                dataRhs.user_remove(dataRhs.get());
            } else {
                if (!dataRhs.user_check_replace(dataRhs.get(), elem)) return false;
                dataRhs.user_remove(dataRhs.get());
                dataRhs.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataRhs.user_check_add(elem)) return false;
            dataRhs.user_add(elem);
        }
        return true;
    }
    public org.xowl.lang.owl2.LiteralExpression getRhsAs(org.xowl.lang.owl2.LiteralExpression type) { return dataRhs.get(); }
    // </editor-fold>

    public LesserEqual() {
        dataLhs = new lhs_impl(this);
        dataRhs = new rhs_impl(this);
    }
    
}
