/* This file has been generated by:
   xOWL Code Generator
*/
package org.xowl.infra.lang.runtime;

public class DatatypeRestriction implements org.xowl.infra.lang.runtime.DataPropertyAssertion_OR_DatatypeRestriction {
    // <editor-fold defaultstate="collapsed" desc="Property valueLiteral">
    private static class valueLiteral_impl implements org.xowl.infra.lang.runtime.DataPropertyAssertion_OR_DatatypeRestriction.valueLiteral {
        private org.xowl.infra.lang.runtime.DatatypeRestriction domain;
        private org.xowl.infra.lang.runtime.Literal data;
        public org.xowl.infra.lang.runtime.Literal get_raw() { return data; }
        public org.xowl.infra.lang.runtime.Literal get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.infra.lang.runtime.Literal elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.infra.lang.runtime.Literal elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.infra.lang.runtime.Literal elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.infra.lang.runtime.Literal oldElem, org.xowl.infra.lang.runtime.Literal  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.infra.lang.runtime.Literal elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.infra.lang.runtime.Literal elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.infra.lang.runtime.Literal elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.infra.lang.runtime.Literal elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.infra.lang.runtime.Literal oldElem, org.xowl.infra.lang.runtime.Literal  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.infra.lang.runtime.Literal elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.infra.lang.runtime.Literal elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.infra.lang.runtime.Literal elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.infra.lang.runtime.Literal elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.infra.lang.runtime.Literal oldElem, org.xowl.infra.lang.runtime.Literal  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.infra.lang.runtime.Literal elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.infra.lang.runtime.Literal elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.infra.lang.runtime.Literal elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.infra.lang.runtime.Literal elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.infra.lang.runtime.Literal oldElem, org.xowl.infra.lang.runtime.Literal  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.infra.lang.runtime.Literal elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.infra.lang.runtime.Literal elem) {
            tree_remove(elem);
        }
        public valueLiteral_impl(org.xowl.infra.lang.runtime.DatatypeRestriction domain) {
            this.domain = domain;
        }
    }
    private valueLiteral_impl dataValueLiteral;
    public org.xowl.infra.lang.runtime.DataPropertyAssertion_OR_DatatypeRestriction.valueLiteral __getImplOfvalueLiteral() { return dataValueLiteral; }
    public boolean setValueLiteral(org.xowl.infra.lang.runtime.Literal elem) {
        if (dataValueLiteral.get() != null) {
            if (elem == null) {
                if (!dataValueLiteral.user_check_remove(dataValueLiteral.get())) return false;
                dataValueLiteral.user_remove(dataValueLiteral.get());
            } else {
                if (!dataValueLiteral.user_check_replace(dataValueLiteral.get(), elem)) return false;
                dataValueLiteral.user_remove(dataValueLiteral.get());
                dataValueLiteral.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataValueLiteral.user_check_add(elem)) return false;
            dataValueLiteral.user_add(elem);
        }
        return true;
    }
    public org.xowl.infra.lang.runtime.Literal getValueLiteral() { return dataValueLiteral.get(); }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Property facet">
    public static interface facet {
        boolean check_contains(org.xowl.infra.lang.owl2.IRI elem);
        boolean user_check_add(org.xowl.infra.lang.owl2.IRI elem);
        boolean user_check_remove(org.xowl.infra.lang.owl2.IRI elem);
        boolean user_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem);
        void user_add(org.xowl.infra.lang.owl2.IRI elem);
        void user_remove(org.xowl.infra.lang.owl2.IRI elem);
        boolean inverse_check_add(org.xowl.infra.lang.owl2.IRI elem);
        boolean inverse_check_remove(org.xowl.infra.lang.owl2.IRI elem);
        boolean inverse_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem);
        void inverse_add(org.xowl.infra.lang.owl2.IRI elem);
        void inverse_remove(org.xowl.infra.lang.owl2.IRI elem);
    }
    private static class facet_impl implements org.xowl.infra.lang.runtime.DatatypeRestriction.facet {
        private org.xowl.infra.lang.runtime.DatatypeRestriction domain;
        private org.xowl.infra.lang.owl2.IRI data;
        public org.xowl.infra.lang.owl2.IRI get_raw() { return data; }
        public org.xowl.infra.lang.owl2.IRI get() { return data; }
        private boolean check_card(int modifier) {
            int card = modifier + 0;
            if (data != null) card++;
            return (card >= 0 && card <= 1);
        }
        @Override public boolean check_contains(org.xowl.infra.lang.owl2.IRI elem) { return (data == elem); }
        public boolean simple_check_add(org.xowl.infra.lang.owl2.IRI elem) {
            if (check_contains(elem)) return false;
            if (!check_card(1)) return false;
            return true;
        }
        public boolean simple_check_remove(org.xowl.infra.lang.owl2.IRI elem) {
            if (!check_contains(elem)) return false;
            if (!check_card(-1)) return false;
            return true;
        }
        public boolean simple_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem) {
            if (check_contains(newElem)) return false;
            if (!check_contains(oldElem)) return false;
            return true;
        }
        public void simple_add(org.xowl.infra.lang.owl2.IRI elem) {
            data = elem;
        }
        public void simple_remove(org.xowl.infra.lang.owl2.IRI elem) {
            data = null;
        }
        private boolean tree_check_add(org.xowl.infra.lang.owl2.IRI elem) {
            if (!simple_check_add(elem)) return false;
            return true;
        }
        private boolean tree_check_remove(org.xowl.infra.lang.owl2.IRI elem) {
            if (!simple_check_remove(elem)) return false;
            return true;
        }
        private boolean tree_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem) {
            if (!simple_check_replace(oldElem, newElem)) return false;
            return true;
        }
        private void tree_add(org.xowl.infra.lang.owl2.IRI elem) {
            simple_add(elem);
        }
        private void tree_remove(org.xowl.infra.lang.owl2.IRI elem) {
            simple_remove(elem);
        }
        @Override public boolean user_check_add(org.xowl.infra.lang.owl2.IRI elem) {
            return tree_check_add(elem);
        }
        @Override public boolean user_check_remove(org.xowl.infra.lang.owl2.IRI elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean user_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void user_add(org.xowl.infra.lang.owl2.IRI elem) {
            tree_add(elem);
        }
        @Override public void user_remove(org.xowl.infra.lang.owl2.IRI elem) {
            tree_remove(elem);
        }
        @Override public boolean inverse_check_add(org.xowl.infra.lang.owl2.IRI elem) {
            return tree_check_add(elem);
        }
        @Override public boolean inverse_check_remove(org.xowl.infra.lang.owl2.IRI elem) {
            return tree_check_remove(elem);
        }
        @Override public boolean inverse_check_replace(org.xowl.infra.lang.owl2.IRI oldElem, org.xowl.infra.lang.owl2.IRI  newElem) {
            return tree_check_replace(oldElem, newElem);
        }
        @Override public void inverse_add(org.xowl.infra.lang.owl2.IRI elem) {
            tree_add(elem);
        }
        @Override public void inverse_remove(org.xowl.infra.lang.owl2.IRI elem) {
            tree_remove(elem);
        }
        public facet_impl(org.xowl.infra.lang.runtime.DatatypeRestriction domain) {
            this.domain = domain;
        }
    }
    private facet_impl dataFacet;
    public org.xowl.infra.lang.runtime.DatatypeRestriction.facet __getImplOffacet() { return dataFacet; }
    public boolean setFacet(org.xowl.infra.lang.owl2.IRI elem) {
        if (dataFacet.get() != null) {
            if (elem == null) {
                if (!dataFacet.user_check_remove(dataFacet.get())) return false;
                dataFacet.user_remove(dataFacet.get());
            } else {
                if (!dataFacet.user_check_replace(dataFacet.get(), elem)) return false;
                dataFacet.user_remove(dataFacet.get());
                dataFacet.user_add(elem);
            }
        } else {
            if (elem == null) return true;
            if (!dataFacet.user_check_add(elem)) return false;
            dataFacet.user_add(elem);
        }
        return true;
    }
    public org.xowl.infra.lang.owl2.IRI getFacet() { return dataFacet.get(); }
    // </editor-fold>

    public DatatypeRestriction() {
        dataValueLiteral = new valueLiteral_impl(this);
        dataFacet = new facet_impl(this);
    }

}
