#%RAML 1.0
---
title: xOWL Triple Store
version: v1
types:
  ApiError: !include schemaUtils.json#/definitions/ApiError
  Product: !include schemaUtils.json#/definitions/Product
  EmbeddedDependencies: !include schemaUtils.json#/definitions/EmbeddedDependencies
  Metric: !include schemaUtils.json#/definitions/Metric
  MetricSnapshot: !include schemaUtils.json#/definitions/MetricSnapshot
  XOWLUser: !include schemaServerAPI.json#/definitions/XOWLUser
  XOWLUsers: !include schemaServerAPI.json#/definitions/XOWLUsers
  XOWLUserPrivileges: !include schemaServerAPI.json#/definitions/XOWLUserPrivileges
  XOWLDatabase: !include schemaServerAPI.json#/definitions/XOWLDatabase
  XOWLDatabases: !include schemaServerAPI.json#/definitions/XOWLDatabases
  XOWLDatabasePrivileges: !include schemaServerAPI.json#/definitions/XOWLDatabasePrivileges
  XOWLRule: !include schemaServerAPI.json#/definitions/XOWLRule
  XOWLRules: !include schemaServerAPI.json#/definitions/XOWLRules
  XOWLStoredProcedure: !include schemaServerAPI.json#/definitions/XOWLStoredProcedure
  XOWLStoredProcedures: !include schemaServerAPI.json#/definitions/XOWLStoredProcedures
  XOWLStoredProcedureContext: !include schemaServerAPI.json#/definitions/XOWLStoredProcedureContext
traits:
  secured:
    usage: Apply this to any method that needs to be secured
    description: Trait for requests that require authentication
    headers:
      Cookie:
        description: Authentication token provided by the server
        example: __Secure-xOWL-Token-v1=AAAAA
        required: true
    responses:
      401:
        description: No user is logged-in, or the authentication token is invalid.
      403:
        description: The logged-in user is not authorized to perform this operation.
      440:
        description: The user session has expired.
  resourceAccess:
    usage: Apply this to any method that refers to a particular resource
    description: Trait for requests that refer to particular resources
    responses:
      404:
        description: The requested resource cannot be found.
  mayFail:
    usage: Apply this to any method that may fail
    description: Trait for requests that may fail due to reasons other that security and resource access failure
    responses:
      400:
        description: The request is malformed in some way
        body:
          application/json:
            type: ApiError
            example: |
              {
                "type": "org.xowl.infra.utils.ApiError",
                "code": 1,
                "message": "The main description of this error",
                "helpLink": "http://xowl.org/supports/errors/001.html",
                "content": "Supplementary information about the error"
              }
      500:
        description: An unexpected error occurred on the server
      501:
        description: The requested operation is not supported
      560:
        description: An unknown error error occurred on the server
        body:
          text/plain:
            type: string
            description: The error message from the server
  sparqlQuery:
    usage: Apply this to any method that return SPARQL results
    description: Trait for requests that return SPARQL results
    responses:
      200:
        description: The result for the SPARQL query
        body:
          application/n-triples:
            description: RDF triples in N-Triple syntax
          application/n-quads:
            description: RDF quadsin N-Quad syntax
          text/turtle:
            description: RDF triples in Turtle syntax
          application/rdf+xml:
            description: RDF triples in RDF/XML syntax
          application/ld+json:
            description: RDF quads in JSON-LD syntax
          application/trig:
            description: RDF quads in TriG syntax
          application/sparql-results+xml:
            description: SPARQL results in XML syntax
          application/sparql-results+json:
            description: SPARQL results in JSON syntax
          text/csv:
            description: SPARQL results in CSV syntax
          text/tab-separated-values:
            description: SPARQL results in TSV syntax
      461:
        description: The SPARQL query failed
        body:
          text/plain:
            description: The SPARQL error message
baseUri: https://localhost:3443/api/v1
/me:
  description: Represents the current user in its interaction with the server
  get:
    description: Gets the data representing the currently logged user
    is: [secured]
    responses:
      200:
        description: A description of the currently logged-in user
        body:
          application/json:
            type: XOWLUser
            example: |
              { "type": "org.xowl.infra.server.api.XOWLUser", "name": "user" }
  /login:
    description: Action for a user to log on the server
    post:
      description: Tries to login on the server
      is: [mayFail]
      queryParameters:
        login:
          displayName: Login
          type: string
          description: The login to use
          example: admin
          required: true
      body:
        text/plain:
          type: string
          description: The password to use
          example: myPassword01
          required: true
      responses:
        200:
          description: The operation succeeded
          headers:
            Set-Cookie:
              description: The authentication token that can be used later to authenticate for further operations
              example: __Secure-xOWL-Token-v1=AAAAA
              required: true
        401:
          description: The login operation failed
  /logout:
    description: Action for a user to log out of the server
    post:
      description: Tries to logout from the server
      is: [secured]
      responses:
        200:
          description: The operation succeeded
          headers:
            Set-Cookie:
              description: Resets the authentication token
              example: __Secure-xOWL-Token-v1=; Max-Age=0
              required: true
/server:
  description: Represents the server
  /product:
    description: Represents the product that describes this server
    is: [secured, mayFail]
    get:
      description: Gets the description of the product for this server
      responses:
        200:
          description: The description of the product for this server
          body:
            application/json:
              type: Product
              example: |
                {
                  "type": "org.xowl.infra.utils.product.Product",
                  "identifier": "org.xowl.infra.server.TripleStoreServer",
                  "name": "xOWL Triple Store Server",
                  "description": "Description for the product",
                  "version": {
                    "number": "2.0.0",
                    "scmTag": "ffffffff",
                    "buildUser": "jenkins",
                    "buildTag": "jenkins-xxx-42",
                    "buildTimestamp": "01/01/2010 10:10"
                  },
                  "copyright": "Copyright (c) Association Cénotélie",
                  "iconName": "",
                  "iconContent: "",
                  "vendor": "Association Cénotélie",
                  "vendorLink": "http://cenotelie.fr",
                  "link": "http://xowl.org",
                  "license": {
                    "name": "LGPLv3",
                    "fullText": "..."
                  }
                }
    /dependencies:
      description: Represents the dependencies embedded by this product
      is: [secured, mayFail]
      get:
        description: Gets the dependencies embedded by this product
        responses:
          200:
            description: The dependencies embedded by this product
            body:
              application/json:
                type: EmbeddedDependencies
                example: |
                  [
                    {
                      "type": "org.xowl.infra.utils.product.EmbeddedDependency",
                      "identifier": "fr.cenotelie.hime.redist",
                      "name": "Hime Runtime",
                      "contentType": "Java",
                      "version": "2.0.6",
                      "copyright": "Copyright (c) 2016 Laurent Wouters",
                      "link": "https://bitbucket.org/laurentw/hime",
                      "license": {
                        "name": "LGPLv3",
                        "fullText": "..."
                      }
                    }
                  ]
  /shutdown:
    description: Action to shutdown the server
    is: [secured, mayFail]
    post:
      description: Attempts to shutdown the server
      responses:
        200:
          description: The server is shutting down
  /restart:
    description: Action to restart the server
    is: [secured, mayFail]
    post:
      description: Attempts to restart the server
      responses:
        200:
          description: The server is restarting
  /grantAdmin:
    description: Action to grant server administrative privileges to a user
    post:
      description: Grants the server administration privilege to a user
      is: [secured, mayFail, resourceAccess]
      queryParameters:
        user:
          displayName: User
          type: string
          description: The identifier of the user to which administration privilege shall be granted
          example: user01
          required: true
      responses:
        200:
          description: The privilege has been granted
  /revokeAdmin:
    description: Action to revoke server administrative privileges from a user
    post:
      description: Revokes the server administration privilege from a user
      is: [secured, mayFail, resourceAccess]
      queryParameters:
        user:
          displayName: User
          type: string
          description: The identifier of the user from which the administration privilege shall be revoked
          example: user01
          required: true
      responses:
        200:
          description: The privilege has been revoked
/databases:
  description: The collection of databases on the server
  is: [secured, mayFail]
  get:
    description: Gets the list of the databases on the server that can be accessed by the currently logged-in user
    responses:
      200:
        description: Returns a list of the databases
        body:
          application/json:
            type: XOWLDatabases
            example: |
              [ {"type": "org.xowl.infra.server.api.XOWLDatabase", "name": "db1"}, {"type": "org.xowl.infra.server.api.XOWLDatabase", "name": "db2"} ]
  /{dbId}:
    description: A specific database on the server
    is: [secured, mayFail, resourceAccess]
    get:
      description: Gets the description of the database
      responses:
        200:
          description: Returns the description of the database
          body:
            application/json:
              type: XOWLDatabase
              example: |
                {"type": "org.xowl.infra.server.api.XOWLDatabase", "name": "db1"}
    put:
      description: Creates the corresponding database
      responses:
        200:
          description: Returns the created database
          body:
            application/json:
              type: XOWLDatabase
              example: |
                {"type": "org.xowl.infra.server.api.XOWLDatabase", "name": "db1"}
    delete:
      description: Drops (delete) this database
      responses:
        200:
          description: The database has been dropped
    post:
      description: Uploads raw data to the database
      body:
        application/n-triples:
          description: RDF triples in N-Triple syntax
        application/n-quads:
          description: RDF quadsin N-Quad syntax
        text/turtle:
          description: RDF triples in Turtle syntax
        application/rdf+xml:
          description: RDF triples in RDF/XML syntax
        application/ld+json:
          description: RDF quads in JSON-LD syntax
        application/trig:
          description: RDF quads in TriG syntax
        text/owl-functional:
          description: OWL ontology in Functional syntax
        application/owl+xml:
          description: OWL ontology in OWL/XML
        application/x-xowl-rdft:
          description: xOWL RDF-centric rule language
        application/x-xowl:
          description: xOWL ontology in Functional syntax
      responses:
        200:
          description: The data has been inserted
    /metric:
      description: The metric defition for the statistics of the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the metric definition for the statistics of the database
        responses:
          200:
            description: Returns the definition of the metric for the statistics of the database
            body:
              application/json:
                type: Metric
    /statistics:
      description: The statistics of the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the statistics of the database
        responses:
          200:
            description: Returns a snapshot of the statistics of the database
            body:
              application/json:
                type: MetricSnapshot
    /sparql:
      description: The SPARQL endpoint for the database
      is: [secured, mayFail, resourceAccess, sparqlQuery]
      get:
        description: Executes a SPARQL query on the database
        queryParameters:
          query:
            displayName: Query
            type: string
            description: The SPARQL query to be executed
            example: SELECT ?c WHERE { GRAPH ?g { ?x a ?c } }
            required: true
          default-graph-uri:
            displayName: URIs for default graph
            type: array
            description: The URIs for the default graph
            example: ["http://example.com/graph1"]
            required: false
          named-graph-uri:
            displayName: URIs for named graph
            type: array
            description: The URIs for the named graph
            example: ["http://example.com/graph1"]
            required: false
      post:
        description: Executes a SPARQL quert on the database
        queryParameters:
          default-graph-uri:
            displayName: URIs for default graph
            type: array
            description: The URIs for the default graph
            example: ["http://example.com/graph1"]
            required: false
          named-graph-uri:
            displayName: URIs for named graph
            type: array
            description: The URIs for the named graph
            example: ["http://example.com/graph1"]
            required: false
        body:
          application/sparql-query:
            displayName: The SPARQL query to be executed
            type: string
            description: The SPARQL query to be executed
            example: SELECT ?c WHERE { GRAPH ?g { ?x a ?c } }
        responses:
          200:
            description: The result for the SPARQL query
            body:
              application/n-triples:
                description: RDF triples in N-Triple syntax
              application/n-quads:
                description: RDF quadsin N-Quad syntax
              text/turtle:
                description: RDF triples in Turtle syntax
              application/rdf+xml:
                description: RDF triples in RDF/XML syntax
              application/ld+json:
                description: RDF quads in JSON-LD syntax
              application/trig:
                description: RDF quads in TriG syntax
              application/sparql-results+xml:
                description: SPARQL results in XML syntax
              application/sparql-results+json:
                description: SPARQL results in JSON syntax
              text/csv:
                description: SPARQL results in CSV syntax
              text/tab-separated-values:
                description: SPARQL results in TSV syntax
    /entailment:
      description: The entailment regime for the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the current entailment regime for the database
        responses:
          200:
            description: |
              Returns the current entailment regime for the database, one of: "none", "simple", "RDF", "RDFS", "OWL2_RDF", "OWL2_DIRECT"
            body:
              text/plain:
                type: string
                example: simple
      put:
        description: Sets the entailment regime for the database
        body:
          text/plain:
            displayName: Entailment Regime
            type: string
            description: |
              The entailment regime for the database, one of: "none", "simple", "RDF", "RDFS", "OWL2_RDF", "OWL2_DIRECT"
            example: OWL2_RDF
        responses:
          200:
            description: The operation succeeded
      delete:
        description: Resets the entailment regime to 'none'
        responses:
          200:
            description: The operation succeeded
    /privileges:
      description: The privileges assigned to users for the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the privileges assigned to users for the database
        responses:
          200:
            description: Returns the privileges assigned to users for the database
            body:
              application/json:
                type: XOWLDatabasePrivileges
                example: |
                  {
                    "type": "org.xowl.infra.server.api.XOWLDatabasePrivileges",
                    "accesses": [
                      {
                        "user": "user1",
                        "isAdmin": false,
                        "canWrite": true,
                        "canRead": true
                      }
                    ]
                  }
      /grant:
        description: Action to grant privileges to a user for the database
        is: [secured, mayFail, resourceAccess]
        post:
          description: Grants privileges to a user for the database
          queryParameters:
            user:
              displayName: User
              type: string
              description: The identifier of the user to assign privilege to
              example: user01
              required: true
            access:
              displayName: Access
              type: string
              description: The privilege to grant (one of ADMIN, WRITE, READ)
              example: WRITE
              required: true
          responses:
            200:
              description: The operation succeeded
      /revoke:
        description: Action to revoke privileges from a user for the database
        is: [secured, mayFail, resourceAccess]
        post:
          description: Revokes privileges from a user for the database
          queryParameters:
            user:
              displayName: User
              type: string
              description: The identifier of the user to revoke privilege from
              example: user01
              required: true
            access:
              displayName: Access
              type: string
              description: The privilege to revoke (one of ADMIN, WRITE, READ)
              example: WRITE
              required: true
          responses:
            200:
              description: The operation succeeded
    /rules:
      description: The collection of rules for the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the list of the rules for the database
        responses:
          200:
            description: Returns the list of rules for the database
            body:
              application/json:
                type: XOWLRules
                example: |
                  [
                    {
                      "type": "org.xowl.infra.server.api.XOWLRule",
                      "name": "http://xowl.org/rules/rule1",
                      "definition": "...",
                      "isActive": false
                    }
                  ]
      put:
        description: Inserts a new rule in the database
        queryParameters:
          active:
            displayName: Is Active
            type: boolean
            description: Whether the new rule shall be immediately active
            example: false
            required: true
        body:
          application/x-xowl-rdft:
            displayName: Rule definition
            type: string
            description: The definition of the rule to insert
        responses:
          200:
            description: Returns the new rule for the database
            body:
              application/json:
                type: XOWLRule
                example: |
                  {
                    "type": "org.xowl.infra.server.api.XOWLRule",
                    "name": "http://xowl.org/rules/rule1",
                    "definition": "...",
                    "isActive": false
                  }
      /{ruleId}:
        description: A specific rule for the database
        is: [secured, mayFail, resourceAccess]
        get:
          description: Gets the description of the rule
          responses:
            200:
              description: Returns the description of the rule
              body:
                application/json:
                  type: XOWLRule
                  example: |
                    {
                      "type": "org.xowl.infra.server.api.XOWLRule",
                      "name": "http://xowl.org/rules/rule1",
                      "definition": "...",
                      "isActive": false
                    }
        delete:
          description: Deletes the rule from the database
          responses:
            200:
              description: The operation succeeded
        /status:
          description: The status of the rule
          is: [secured, mayFail, resourceAccess]
          get:
            description: Gets the current status of the rule
            responses:
              200:
                description: Returns the matching status of the rule
                body:
                  application/json:
                    type: object
        /activate:
          description: Action to activate the rule
          is: [secured, mayFail, resourceAccess]
          post:
            description: Activates the rule for the database
            responses:
              200:
                description: The operation succeeded
        /deactivate:
          description: Action to de-activate the rule
          is: [secured, mayFail, resourceAccess]
          post:
            description: De-activates the rule for the database
            responses:
              200:
                description: The operation succeeded
    /procedures:
      description: The collection of stored procedures for the database
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the list of the stored procedures for the database
        responses:
          200:
            description: Returns the list of the stored procedures for the database
            body:
              application/json:
                type: XOWLStoredProcedures
                example: |
                  [
                    {
                      "type": "org.xowl.infra.server.api.XOWLStoredProcedure",
                      "name": "http://xowl.org/procedures/proc1",
                      "definition": "...",
                      "parameters": [ "x", "y" ]
                    }
                  ]
      /{procedureId}:
        description: A specific stored procedure
        is: [secured, mayFail, resourceAccess]
        get:
          description: Gets the definition of the stored procedure
          responses:
            200:
              description: Returns the definition of the stored procedure
              body:
                application/json:
                  type: XOWLStoredProcedure
                  example: |
                    {
                      "type": "org.xowl.infra.server.api.XOWLStoredProcedure",
                      "name": "http://xowl.org/procedures/proc1",
                      "definition": "...",
                      "parameters": [ "x", "y" ]
                    }
        delete:
          description: Deletes the stored procedure from the database
          responses:
            200:
              description: The operation succeeded
        put:
          description: Creates the stored procedure
          body:
            application/json:
              displayName: Procedure definition
              description: The definition of the procedure to insert
              type: XOWLStoredProcedure
              example: |
                {
                  "type": "org.xowl.infra.server.api.XOWLStoredProcedure",
                  "name": "http://xowl.org/procedures/proc1",
                  "definition": "...",
                  "parameters": [ "x", "y" ]
                }
          responses:
            200:
              description: The procedure has been created
              body:
                application/json:
                  type: XOWLStoredProcedure
                  example: |
                    {
                      "type": "org.xowl.infra.server.api.XOWLStoredProcedure",
                      "name": "http://xowl.org/procedures/proc1",
                      "definition": "...",
                      "parameters": [ "x", "y" ]
                    }
        post:
          description: Executes the stored procedure
          is: [sparqlQuery]
          body:
            application/json:
              displayName: Procedure context
              type: XOWLStoredProcedureContext
              description: The context for the procedure to execute
              example: |
                {
                  "type": "org.xowl.infra.server.api.XOWLStoredProcedureContext",
                  "defaultIRIs": [],
                  "namedIRIs": [],
                  "parameters": [
                    {
                      "x": {
                        "type": "uri",
                        "value": "http://xowl.org/myLittleURI"
                      },
                      "y": {
                        "type": "literal",
                        "value": "A sample value",
                        "datatype": "http://www.w3.org/2001/XMLSchema#string",
                        "xml:lang": "en"
                      }
                    }
                  ]
                }
/users:
  description: The collection of users on the server
  is: [secured]
  get:
    description: Gets a list of the users on the server
    responses:
      200:
        description: Returns a list of the users
        body:
          application/json:
            type: XOWLUsers
            example: |
              [ {"type": "org.xowl.infra.server.api.XOWLUser", "name": "user1"}, {"type": "org.xowl.infra.server.api.XOWLUser", "name": "user2"} ]
  /{userId}:
    description: A specific user on the server
    is: [secured, mayFail, resourceAccess]
    get:
      description: Gets a description of the user
      responses:
        200:
          description: Returns a description of the requested user
          body:
            application/json:
              type: XOWLUser
              example: |
                {"type": "org.xowl.infra.server.api.XOWLUser", "name": "user1"}
    delete:
      description: Deletes the user from the server
      responses:
        200:
          description: The operation succeeded
    put:
      description: Creates the associated user
      body:
        text/plain:
          displayName: Password
          type: string
      responses:
        200:
          description: Returns the created user
          body:
            application/json:
              type: XOWLUser
              example: |
                {"type": "org.xowl.infra.server.api.XOWLUser", "name": "{userId}"}
    /password:
      description: The password for the user
      is: [secured, mayFail, resourceAccess]
      post:
        description: Updates the password for the user
        body:
          text/plain:
            displayName: Password
            type: string
        responses:
          200:
            description: The operation succeeded
    /privileges:
      description: The privileges assigned to the user for databases
      is: [secured, mayFail, resourceAccess]
      get:
        description: Gets the privileges assigned to the user for databases
        responses:
          200:
            description: Returns the privileges assigned to the user for databases
            body:
              application/json:
                type: XOWLUserPrivileges
                example: |
                  {
                    "type": "org.xowl.infra.server.api.XOWLUserPrivileges",
                    "isServerAdmin": false,
                    "accesses": [
                      {
                        "database": "db01",
                        "isAdmin": false,
                        "canWrite": true,
                        "canRead": true
                      }
                    ]
                  }
      /grant:
        description: Action to grant privileges to the user for a database
        is: [secured, mayFail, resourceAccess]
        post:
          description: Grants privileges to the user for a database
          queryParameters:
            db:
              displayName: Database
              type: string
              description: The identifier of the database to grant for
              example: db01
              required: true
            access:
              displayName: Access
              type: string
              description: The privilege to grant (one of ADMIN, WRITE, READ)
              example: WRITE
              required: true
          responses:
            200:
              description: The operation succeeded
      /revoke:
        description: Action to revoke privileges from the user for a database
        is: [secured, mayFail, resourceAccess]
        post:
          description: Revokes privileges from the user for a database
          queryParameters:
            db:
              displayName: Database
              type: string
              description: The identifier of the database to grant for
              example: db01
              required: true
            access:
              displayName: Access
              type: string
              description: The privilege to grant (one of ADMIN, WRITE, READ)
              example: WRITE
              required: true
          responses:
            200:
              description: The operation succeeded
